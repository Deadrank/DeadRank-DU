name: DeadGunner v5.0.14-minimal

pvp: true

slots:
    core:
        class: CoreUnit
        select: all
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DataBank
        select: all

handlers:
  radar_1:
    onEnter(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        if SZD ~= nil and bootTimer > 0 then
            if not inSZ and SZD*0.000005 > radarBuffer or szAlerts or recordAll then
                system.stopSound()
                system.playSound('contact.mp3')
                if vec3(construct.getVelocity()):len() * 3.6 > 50000 then
                    warpScan[id] = cPos
                else
                    unknownRadar[id] = cPos
                end
            end
        end
  radar_1:
    onLeave(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        local inWS = false
        radarFriendlies[tostring(id)] = nil
        if warpScan then
            for k,v in pairs(warpScan) do if id == k then inWS = true break end end
            if not inSZ and SZD*0.000005 > radarBuffer or szAlerts then
                system.stopSound()
                system.playSound('targetleft.mp3')
                if szAlerts then system.print(string.format('-- [%s] %s left radar',id,radar_1.getConstructName(id))) end
                if inWS then
                    local cored = ''
                    if radar_1.isConstructAbandoned(id) then
                        cored = '[CORED] '
                    end
                    system.print('----------------------')
                    system.print(string.format('%.0f - (%s[%s] %s) MIDPOINT (::pos{0,0,%.0f,%.0f,%.0f})',arkTime,cored,radar_1.getConstructCoreSize(id),radar_1.getConstructName(id),(cPos['x']+warpScan[id]['x'])/2,(cPos['y']+warpScan[id]['y'])/2,(cPos['z']+warpScan[id]['z'])/2))
                    system.print('----------------------')
                    system.print()
                    warpScan[id] = nil
                end
            end
        end
  radar_2:
    onEnter(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        if SZD ~= nil and bootTimer > 0 then
            if not inSZ and SZD*0.000005 > radarBuffer or szAlerts or recordAll then
                system.stopSound()
                system.playSound('contact.mp3')
                if vec3(construct.getVelocity()):len() * 3.6 > 50000 then
                    warpScan[id] = cPos
                else
                    unknownRadar[id] = cPos
                end
            end
        end
  radar_2:
    onLeave(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        local inWS = false
        radarFriendlies[tostring(id)] = nil
        if warpScan then
            for k,v in pairs(warpScan) do if id == k then inWS = true break end end
            if not inSZ and SZD*0.000005 > radarBuffer or szAlerts then
                system.stopSound()
                system.playSound('targetleft.mp3')
                if szAlerts then system.print(string.format('-- [%s] %s left radar',id,radar.getConstructName(id))) end
                if inWS then
                    local cored = ''
                    if radar.isConstructAbandoned(id) then
                        cored = '[CORED] '
                    end
                    system.print('----------------------')
                    system.print(string.format('%.0f - (%s[%s] %s) MIDPOINT (::pos{0,0,%.0f,%.0f,%.0f})',arkTime,cored,radar.getConstructCoreSize(id),radar.getConstructName(id),(cPos['x']+warpScan[id]['x'])/2,(cPos['y']+warpScan[id]['y'])/2,(cPos['z']+warpScan[id]['z'])/2))
                    system.print('----------------------')
                    system.print()
                    warpScan[id] = nil
                end
            end
        end
  unit:
    onStart:
      lua: |
        
        -- Add Valid User ID --
        masterPlayerID = player.getId()
        pilotName = system.getPlayerName(masterPlayerID)
        validPilotCode = '123456' --Your player ID
        ----------------------
        
        chairID = tostring(player.getSeatId())
        showAlerts = false
        
        -- SETTINGS --
        useDB = true --export use connected DB for config options
        dmgAvgDuration = 10 --export Duration to avg incoming damage over
        slave = false --export Show slave radar widget
        szAlerts = false --export
        minimalWidgets = false --export
        hideAbandonedCores = true --export
        targetIndicators = true --export Show warnings when target is speeding up or slowing down
        printCombatLog = true --export Print weapon hits/misses to lua
        validatePilot = false --export
        pilotSeat = false --export
        targetRadar = false --export 2nd Radar widget with primary targets
        weaponWidgets = true --export Show weapon widgets (stasis always shown)
        excludeXS = true --export
        abandonedCoreDist = 10 --export Distance in AR to show abandoned cores in SU
        dangerWarning = 4 --export
        L_Shield_HP = 11500000 --export
        M_Shield_HP = 8625000 --export
        S_Shield_HP = 8625000 --export
        XS_Shield_HP = 500000 --export
        max_radar_load = 300 --export
        maxWeaponsPerWidget = 3 --export How many weapons in each default weapon widget
        radarBuffer = 0.00001
        
        lAlt = false
        
        -- Choose DB for seat --
        write_db = nil
        local found = false
        for i,dbName in pairs(db) do
            if dbName.getStringValue('usedBy') == chairID then
                write_db = dbName
                found = true
                break
            end
        end
        if not found then
            for i,dbName in pairs(db) do
                if not dbName.hasKey('usedBy') then
                    write_db = dbName
                    write_db.setStringValue('usedBy',chairID)
                    found = true
                    break
                end
            end
        end
        if not found then system.print('-- No usable DB found --') end
        ------------------------
        
        friendlySIDs = {}
        userCode = {}
        userCode[validPilotCode] = pilotName
        if useDB and write_db ~= nil then
            globalDB('get')
        end
        
        --- Radar Initial Values ---
        recordAll = false
        slaveRadarPrimary = '0'
        radarSelected = '0'
        constructPosition = vec3(construct.getWorldPosition())
        manual_trajectory = {}
        trajectory_calc = {}
        cr = nil
        cr_time = 0
        cr_delta = 0
        constructListData = {}
        radarWidgetData = nil
        radarTrackingData = {}
        radarFriendlies = {}
        radarDataID = nil
        primaryRadarID = nil
        primaryRadarPanelID = nil
        primaryData = nil
        radarStart = false
        filterSize = {}
        table.insert(filterSize,'XL')
        table.insert(filterSize,'L')
        table.insert(filterSize,'M')
        table.insert(filterSize,'S')
        table.insert(filterSize,'XS')
        useShipID = true
        radarFilter = 'All'
        radarSort = 'Distance'
        validSizes = {}
        table.insert(validSizes,'L')
        table.insert(validSizes,'M')
        table.insert(validSizes,'S')
        table.insert(validSizes,'XS')
        radarKind = {}
        table.insert(radarKind,'Universe')
        table.insert(radarKind,'Planet')
        table.insert(radarKind,'Asteroid')
        table.insert(radarKind,'Static')
        table.insert(radarKind,'Dynamic')
        table.insert(radarKind,'Space')
        table.insert(radarKind,'Alien')
        table.insert(radarKind,'Beacon')
        radarStats = {
            ['enemy'] = {
                ['L'] = 0,
                ['M'] = 0,
                ['S'] = 0,
                ['XS'] = 0
            },
            ['friendly'] = {
                ['L'] = 0,
                ['M'] = 0,
                ['S'] = 0,
                ['XS'] = 0
            }
        }
        lastDistance = 0
        lastUpdateTime = 0
        speedCompare = 'Not Identified'
        accelCompare = 'No Accel'
        lastSpeed = 0
        speedCompare = 0
        gapCompare = 0
        identifiedBy = 0
        attackedBy = 0
        closestEnemy = {}
        warpScan = {}
        unknownRadar = {}
        radarContactNumber = 0
        primaries = {}
        if pcall(require,'autoconf/custom/hvt') then 
            primaries = require('autoconf/custom/hvt') 
        end
        scout_info = {}
        if pcall(require,'autoconf/custom/scouting') then 
            scout_info = require('autoconf/custom/scouting')
        end
        ------------------------------
        
        --- Screen Resolution/keys ---
        screenHeight = system.getScreenHeight()
        screenWidth = system.getScreenWidth()
        --------------------------
        
        if write_db ~= nil then
            for _,key in pairs(write_db.getKeyList()) do
                if write_db.getStringValue(key) ~= nil and write_db.getStringValue(key) ~= '' and string.starts(key,'uc-') then 
                    userCode[string.sub(key,4)] = write_db.getStringValue(key)
                end
            end
        end
        
        inSZ = not construct.isInPvPZone()
        SZD = construct.getDistanceToSafeZone()
        
        --- Weapons --
        dpsChart = {}
        weaponPanel = nil
        weaponData = {}
        stasisData = {}
        stasis = false
        shown_weapons = {}
        shieldDmgTrack = {
            ['L'] = L_Shield_HP,
            ['M'] = M_Shield_HP,
            ['S'] = S_Shield_HP,
            ['XS'] = XS_Shield_HP
        }
        dmgTracker = {}
        primary = nil
        --------------
        
        bootTimer = 0
        if validatePilot then
            local validPilot = false
            for k,v in pairs(userCode) do 
                if k == tostring(player.getId()) then validPilot = true system.print(string.format('-- Welcome %s --',pilotName)) break end
            end
            if not validPilot then
                system.print(player.getId())
                unit.exit()
            end
        end
        
        -- AR Initialization --
        ar_mode = 'ALL'
        AR_Range = 3
        AR_Size = 8
        AR_Fill = 'rgb(29, 63, 255)'
        AR_Outline = 'rgba(125, 150, 160, 1)'
        AR_Opacity = '0.5'
        FC = nil
        fc_pos = nil
        SL = nil
        sl_pos = nil
        
        -- HTML Initialization --
        arHTML = ''
        weaponHTML = ''
        radarHTML = ''
        identHTML = ''
        dpsHTML = ''
        warningsHTML = ''
        screen_update = 0
        arkTime = system.getArkTime()
        
        ----------------------
        
        warnings = {}
        warningSymbols = {}
        warningSymbols['svgCritical'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 414.205 414.205" style="enable-background:new 0 0 414.205 414.205;">
                            <g>
                                <g>
                                    <polygon points="188.077,129.985 188.077,129.99 165.759,226.671 216.626,207.046 204.891,257.867 194.589,257.867 
                                        206.99,293.641 235.908,257.867 225.606,257.867 244.561,175.773 193.693,195.398 208.797,129.985 		"/>
                                    <path d="M39.11,207.103l167.992,167.992L375.09,207.103L207.103,39.116L39.11,207.103z M207.103,351.103l-143.995-144
                                        L207.103,63.108l143.99,143.995L207.103,351.103z"/>
                                    <path d="M405.093,185.102L229.103,9.112c-12.15-12.15-31.846-12.15-43.996,0L9.112,185.102c-12.15,12.15-12.15,31.846,0,43.996
                                        l175.99,175.995c12.15,12.15,31.846,12.15,43.996,0l175.995-175.99C417.243,216.954,417.243,197.252,405.093,185.102z
                                        M393.092,217.097l-175.985,176c-2.673,2.668-6.226,4.137-10.004,4.137s-7.327-1.469-9.999-4.137L21.108,217.102
                                        c-5.514-5.514-5.514-14.484,0-19.999L197.103,21.108c2.673-2.667,6.221-4.137,9.999-4.137s7.332,1.469,10.004,4.142l175.99,175.99
                                        c2.673,2.673,4.142,6.226,4.142,9.999S395.764,214.429,393.092,217.097z"/>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgWarning'] = [[
                        <svg x="0px" y="0px"
                            viewBox="0 0 192.146 192.146" style="enable-background:new 0 0 192.146 192.146;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M108.186,144.372c0,7.054-4.729,12.32-12.037,12.32h-0.254c-7.054,0-11.92-5.266-11.92-12.32
                                            c0-7.298,5.012-12.31,12.174-12.31C103.311,132.062,108.059,137.054,108.186,144.372z M88.44,125.301h15.447l2.951-61.298H85.46
                                            L88.44,125.301z M190.372,177.034c-2.237,3.664-6.214,5.921-10.493,5.921H12.282c-4.426,0-8.51-2.384-10.698-6.233
                                            c-2.159-3.849-2.11-8.549,0.147-12.349l84.111-149.22c2.208-3.722,6.204-5.96,10.522-5.96h0.332
                                            c4.445,0.107,8.441,2.618,10.513,6.546l83.515,149.229C192.717,168.768,192.629,173.331,190.372,177.034z M179.879,170.634
                                            L96.354,21.454L12.292,170.634H179.879z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgTarget'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 330 330" style="enable-background:new 0 0 330 330;">
                            <g id="XMLID_813_">
                                <path id="XMLID_814_" d="M15,130c8.284,0,15-6.716,15-15V30h85c8.284,0,15-6.716,15-15s-6.716-15-15-15H15C6.716,0,0,6.716,0,15
                                    v100C0,123.284,6.716,130,15,130z"/>
                                <path id="XMLID_815_" d="M15,330h100c8.284,0,15-6.716,15-15s-6.716-15-15-15H30v-85c0-8.284-6.716-15-15-15s-15,6.716-15,15v100
                                    C0,323.284,6.716,330,15,330z"/>
                                <path id="XMLID_816_" d="M315,200c-8.284,0-15,6.716-15,15v85h-85c-8.284,0-15,6.716-15,15s6.716,15,15,15h100
                                    c8.284,0,15-6.716,15-15V215C330,206.716,323.284,200,315,200z"/>
                                <path id="XMLID_817_" d="M215,30h85v85c0,8.284,6.716,15,15,15s15-6.716,15-15V15c0-8.284-6.716-15-15-15H215
                                    c-8.284,0-15,6.716-15,15S206.716,30,215,30z"/>
                                <path id="XMLID_818_" d="M75,165c0,8.284,6.716,15,15,15h60v60c0,8.284,6.716,15,15,15s15-6.716,15-15v-60h60
                                    c8.284,0,15-6.716,15-15s-6.716-15-15-15h-60V90c0-8.284-6.716-15-15-15s-15,6.716-15,15v60H90C81.716,150,75,156.716,75,165z"/>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgGroup'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 487.3 487.3" style="enable-background:new 0 0 487.3 487.3;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M362.1,326.05c-32.6-26.8-67.7-44.5-74.9-48c-0.8-0.4-1.3-1.2-1.3-2.1v-50.7c6.4-4.3,10.6-11.5,10.6-19.7v-52.6
                                            c0-26.2-21.2-47.4-47.4-47.4h-5.6h-5.7c-26.2,0-47.4,21.2-47.4,47.4v52.6c0,8.2,4.2,15.5,10.6,19.7v50.7c0,0.9-0.5,1.7-1.3,2.1
                                            c-7.2,3.5-42.3,21.3-74.9,48c-5.9,4.8-9.3,12.1-9.3,19.7v36h128h127.9v-36C371.4,338.15,368,330.85,362.1,326.05z"/>
                                    </g>
                                    <g>
                                        <path d="M479.2,290.55c-27.3-22.5-56.8-37.4-62.8-40.3c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1
                                            c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.7c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8
                                            c-3.7,1.8-16.5,8.2-32.1,18.2c15.6,8.6,40.3,23.4,63.6,42.6c8.2,6.7,13.6,16,15.6,26.2h97v-30.2
                                            C487,300.65,484.2,294.55,479.2,290.55z"/>
                                    </g>
                                    <g>
                                        <path d="M144,250.25c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.9
                                            c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8c-6,2.9-35.5,17.8-62.8,40.3
                                            c-4.9,4.1-7.8,10.1-7.8,16.5v30.2h97c1.9-10.2,7.4-19.5,15.6-26.2c23.3-19.2,48-34,63.6-42.6
                                            C160.5,258.45,147.7,252.05,144,250.25z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
            ]]
        
        
        
        if radar_1 == nil then
            system.print('ERROR: NO RADAR LINKED')
            warnings['noRadar'] = 'svgWarning'
        else
            warnings['noRadar'] = nil
        end
        
        instructionHTML = ''
        
        unit.setTimer('booting',1)
        
        unit.setTimer('screen',.5)
        system.showScreen(1)
        
        showScreen = true
        lShift = false
        
        radarRange = 0
        radar = nil
        if radar_1 ~= nil then
            radar = radar_1
            radarRange = radar_1.getIdentifyRanges()
            if #radarRange > 0 then
                radarRange = radarRange[1]
            else
                local radar_name = radar_1.getName()
                local radar_size = radar_name:match('Space Radar (%w)')
                local ranges = {}
                ranges['s'] = 90750*1.5
                ranges['m'] = 181500*1.5
                ranges['l'] = 400000
                radarRange = ranges[radar_size]
            end
        end

    onStop:
      lua: |
        if write_db ~= nil then
            write_db.clearValue('primaryTarget')
            globalDB('save')
        end
    onTimer:
      args: ['radar']
      lua: |
          for id,pos in pairs(unknownRadar) do
              local cored = ''
              if radar_1.isConstructAbandoned(id) then
                  cored = '[CORED] '
              end
              if not recordAll or not write_db then
                  system.print()
                  system.print('------ New Contact -------')
                  system.print(string.format('%s',id))
                  system.print('First contact:')
                  system.print(string.format('::pos{0,0,%s,%s,%s}',pos['x'],pos['y'],pos['z']))
                  system.print(string.format('Name: %s%s',cored,radar_1.getConstructName(id)))
                  system.print(string.format('Size: %s',radar_1.getConstructCoreSize(id)))
                  system.print('---------------------------')
              end
              if recordAll and write_db then
                  system.print('------ New Contact -------')
                  system.print(string.format('::pos{0,0,%s,%s,%s}',pos['x'],pos['y'],pos['z']))
                  system.print(string.format('[%s] %s (%s)',radar_1.getConstructCoreSize(id),radar_1.getConstructName(id),radarKind[radar_1.getConstructKind(id)]))
                  system.print('---------------------------')
                  if (not excludeXS and radar_1.getConstructCoreSize(id) == 'XS') or radar_1.getConstructCoreSize(id) ~= 'XS' then
                      write_db.setStringValue(string.format('fnd-pos-%s',id),string.format('::pos{0,0,%s,%s,%s}',pos['x'],pos['y'],pos['z']))
                      write_db.setStringValue(string.format('fnd-name-%s',id),string.format('[%s] %s (%s)',radar_1.getConstructCoreSize(id),radar_1.getConstructName(id),radarKind[radar_1.getConstructKind(id)]))
              
                  end
              end
          end
          unknownRadar = {}
    onTimer:
      args: ['booting']
      lua: |
          if bootTimer == 2 then
              WeaponWidgetCreate(true)
              if radar_1 then 
                  radarDataID,panel = RadarWidgetCreate('RADAR')
                  if targetRadar or slave then primaryRadarID,primaryRadarPanelID = RadarWidgetCreate('PRIMARY TARGETS') end
              end
              
              radarStart = true
              if radar_1 then unit.setTimer('radar',0.15) end
              unit.stopTimer('booting')
          else
              system.print('System booting: '..tostring(bootTimer))
          end
          bootTimer = bootTimer + 1
    onTimer:
      args: ['screen']
      lua: |
          -- SZ Boundary --
          inSZ = not construct.isInPvPZone()
          SZD = construct.getDistanceToSafeZone()
          bgColor = 'rgba(25, 25, 50, 0.35)' 
          fontColor = 'rgba(225, 250, 265, 1)'
          lineColor = 'rgba(150, 175, 185, .75)'
          if not inSZ then 
              lineColor = 'rgba(220, 50, 50, .75)'
              bgColor = 'rgba(175, 75, 75, 0.30)'
              fontColor = 'rgba(225, 250, 265, 1)'
          end
          ---------------------
          
          if weapon_1 then weaponHTML = weaponsWidget() end
          if radar_1 then radarHTML = radarWidget() end
          if radar_1 then identHTML = identifiedWidget() end
          if weapon_1 then dpsHTML = dpsWidget() end
          warningsHTML = warningsWidget()
  system:
    onStart:
      lua: |
        json = require("json")
        Atlas = require('atlas')
        clamp = utils.clamp
        
        function convertWaypoint(wp)
            local clamp  = utils.clamp
            local deg2rad    = math.pi/180
            local rad2deg    = 180/math.pi
            local epsilon    = 1e-10
        
            local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
            local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' .. num ..  ',' .. num .. '}'
            local systemId = wp 
        
            systemId, bodyId, latitude, longitude, altitude = string.match(wp, posPattern)
            assert(systemId, 'Position string is malformed.')
        
            systemId  = tonumber(systemId)
            bodyId    = tonumber(bodyId)
            latitude  = tonumber(latitude)
            longitude = tonumber(longitude)
            altitude  = tonumber(altitude)
        
            if bodyId == 0 then -- this is a hack to represent points in space
            mapPosition =  setmetatable({latitude  = latitude,
                                        longitude = longitude,
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            else
            mapPosition = setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                        longitude = deg2rad*(longitude % 360),
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            end
            if mapPosition.bodyId == 0 then
                return vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)
            end
        
            local center = {
                x=Atlas[systemId][bodyId].center[1],
                y=Atlas[systemId][bodyId].center[2],
                z=Atlas[systemId][bodyId].center[3]
            }
        
            local xproj = math.cos(mapPosition.latitude)
            return center + (Atlas[systemId][bodyId].radius + mapPosition.altitude) *
                vec3(xproj*math.cos(mapPosition.longitude),
                    xproj*math.sin(mapPosition.longitude),
                    math.sin(mapPosition.latitude))
        end
        
        function string.starts(String,Start)
           return string.sub(String,1,string.len(Start))==Start
        end
        
        function contains(tablelist, val)
            for i=1,#tablelist do
               if tablelist[i] == val then 
                  return true
               end
            end
            return false
        end
        
        function formatNumber(val, numType)
            if numType == 'speed' then
                local speedString = ''
                if type(val) == 'number' then speedString = string.format('%.0fkm/h',val)
                else speedString = string.format('%skm/h',val)
                end
                return speedString
            elseif numType == 'distance' then
                local distString = ''
                if type(val) == 'number' then
                    if val < 1000 then distString = string.format('%.2fm',val)
                    elseif val < 100000 then distString = string.format('%.2fkm',val/1000)
                    else distString = string.format('%.2fsu',val*.000005)
                    end
                else
                    distString = string.format('%sm',val)
                end
                return distString
            elseif numType == 'mass' then
                local massStr = ''
                if type(val) == 'number' then
                    if val < 1000 then massStr = string.format('%.2fkg',val)
                    elseif val < 1000000 then massStr = string.format('%.2ft',val/1000)
                    else massStr = string.format('%.2fkt',val/1000000)
                    end
                else
                    massStr = string.format('%skg',val)
                end
                return massStr
            elseif numType == 'angVel' then
                local angString = ''
                if type(val) == 'number' then
                    angString = string.format('%.2fdeg/s',val*180/math.pi)
                    return angString
                end
            end
        end
        
        function WeaponWidgetCreate(start)
            if type(weapon) == 'table' and #weapon > 0 then
                for i = 1, #weapon do
                    if string.starts(weapon[i].getName(),'Stasis') and start then
                        stasis = true
                        stasisData[weapon[i].getLocalId()] = {}
                        stasisData[weapon[i].getLocalId()]['Data'] = weapon[i].getWidgetDataId()
                        stasisData[weapon[i].getLocalId()]['type'] = weapon[i].getWidgetType()
                    elseif not string.starts(weapon[i].getName(),'Stasis') then
                        weaponData[weapon[i].getLocalId()] = {}
                        weaponData[weapon[i].getLocalId()]['shown'] = false
                        weaponData[weapon[i].getLocalId()]['Data'] = weapon[i].getWidgetDataId()
                        weaponData[weapon[i].getLocalId()]['type'] = weapon[i].getWidgetType()
        
                        if weaponWidgets then
                            weaponData[weapon[i].getLocalId()]['shown'] = true
                        elseif weapon[i].getAmmo() == 0 then
                            weaponData[weapon[i].getLocalId()]['shown'] = true
                        end
                    end
                end
        
                if start then weaponPanel = system.createWidgetPanel("Weapons") end
                for k,weapon in pairs(weaponData) do
                    if weapon['shown'] then
                        local _widget = nil
                        _widget = system.createWidget(weaponPanel, weapon['type'])
                        weapon['widget'] = _widget
                        system.addDataToWidget(weapon['Data'],_widget)
                    end
                end
                if start then
                    local _panel = nil
                    for k,weapon in pairs(stasisData) do
                        local _widget = nil
                        if not _panel then
                            _panel = system.createWidgetPanel("Stasis")
                            weapon['panel'] = _panel
                        else
                            weapon['panel'] = _panel
                        end
                        _widget = system.createWidget(_panel, weapon['type'])
                        weapon['widget'] = _widget
                        system.addDataToWidget(weapon['Data'],_widget)
                    end
                end
            end
        end
        
        function updateRadar(filter)
            if radar_1.getOperationalState() == 1 then
                radar = radar_1
            elseif radar_2 then
                if radar_2.getOperationalState() == 1 then
                    radar = radar_2
                else
                    radar = radar_1
                end
            end
        
            local data = radar.getWidgetData()
            data = data:gsub('{"constructsList":.*%],"currentTargetId":"', '{"constructsList":[],"currentTargetId":"')
            local pData = data
        
            local master_primary = '0'
            if slave then
                for i,dbName in pairs(db) do
                    if dbName.hasKey('primaryTarget') then
                        master_primary = dbName.getStringValue('primaryTarget')
                        break
                    end
                end
            end
            if  slaveRadarPrimary ~= master_primary then
                system.print('-- Master updated primary: '..master_primary)
                slaveRadarPrimary = master_primary
            end
        
            local inCombat = construct.getPvPTimer() > 0
        
            local radarList = radar.getConstructIds()
            local constructList = {}
            local primaryList = {}
            radarContactNumber = #radarList
            
            local shipsBySize = {}
            shipsBySize['XS'] = {}
            shipsBySize['S'] = {}
            shipsBySize['M'] = {}
            shipsBySize['L'] = {}
        
            local localIdentifiedBy = 0
            local localAttackedBy = 0
            local tempclosestEnemy = {}
            tempclosestEnemy['id'] = '0'
            tempclosestEnemy['dist'] = 0
            local tempRadarStats = {
                ['enemy'] = {
                    ['L'] = 0,
                    ['M'] = 0,
                    ['S'] = 0,
                    ['XS'] = 0
                },
                ['friendly'] = {
                    ['L'] = 0,
                    ['M'] = 0,
                    ['S'] = 0,
                    ['XS'] = 0
                }
            }
            
            radarSelected = tostring(radar.getTargetId())
            local n = 0 -- Iterator for coroutine
            
            for _,id in pairs(radarList) do
                local constructData = {}
                constructData['constructId'] = tostring(id)
                constructData['distance'] = radar.getConstructDistance(id)
                constructData['size'] = radar.getConstructCoreSize(id)
                constructData['inIdentifyRange'] = radarRange > constructData['distance']
                constructData['info'] = {}
                constructData['myThreatStateToTarget'] = radar.getThreatRateTo(id)
                constructData['targetThreatState'] = radar.getThreatRateFrom(id)
                if constructData['targetThreatState'] == 1 then 
                    constructData['targetThreatState'] = 0
                elseif constructData['targetThreatState'] > 2 and constructData['targetThreatState'] ~= 5 then
                    constructData['targetThreatState'] = 1
                elseif constructData['targetThreatState'] == 5 then
                    constructData['targetThreatState'] = 2
                end
                if constructData['targetThreatState'] == 1 then localIdentifiedBy = localIdentifiedBy + 1
                elseif constructData['targetThreatState'] == 2 then localAttackedBy = localAttackedBy + 1
                end
        
                constructData['kind'] = radar.getConstructKind(id)
                
                constructData['isIdentified'] = radar.isConstructIdentified(id)
                constructData['hasWeapons'] = nil
                constructData['topSpeed'] = 0
                constructData['mass'] = 0
                if constructData['isIdentified'] then
                    local info = radar.getConstructInfos(id)
                    if info['weapons'] ~= 0 then constructData['hasWeapons'] = true else constructData['hasWeapons'] = false end
                    
                    local mass = radar.getConstructMass(id)
                    local topSpeed = (50000/3.6-10713*(mass-10000)/(853926+(mass-10000)))*3.6 --Mass now instead of top speed
                    constructData['topSpeed'] = clamp(topSpeed,20000,50000)
                    constructData['mass'] = mass
                elseif radarTrackingData[tostring(id)] then
                    if radarTrackingData[tostring(id)]['topSpeed'] > 0 then
                        constructData['topSpeed'] = radarTrackingData[tostring(id)]['topSpeed']
                    end
                    if radarTrackingData[tostring(id)]['mass'] > 0 then
                        constructData['mass'] = radarTrackingData[tostring(id)]['mass']
                    end
                end
        
                local abandonded = radar.isConstructAbandoned(id)
                local uniqueCode = string.sub(tostring(id),-3)
                local coreID = uniqueCode
                local name = radar.getConstructName(id)
                name = name:gsub("%%","")
                name = name:gsub("<","")
                name = name:gsub(">","")
                if abandonded then
                    uniqueCode = 'CORED'
                    local core_pos = radar.getConstructWorldPos(id)
                    if write_db then
                        if write_db.hasKey('abnd-'..tostring(id)) then
                            if write_db.getStringValue('abnd-'..tostring(id)) ~= string.format('::pos{0,0,%.2f,%.2f,%.2f}',core_pos[1],core_pos[2],core_pos[3]) then
                                write_db.setStringValue('abnd-'..tostring(id),string.format('::pos{0,0,%.2f,%.2f,%.2f}',core_pos[1],core_pos[2],core_pos[3]))
                                write_db.setStringValue('abnd-name-'..tostring(id),name)
                            end
                       else
                            write_db.setStringValue('abnd-'..tostring(id),string.format('::pos{0,0,%.2f,%.2f,%.2f}',core_pos[1],core_pos[2],core_pos[3]))
                           write_db.setStringValue('abnd-name-'..tostring(id),name)
                        end
                    end
                end
        
                
                local transponder_match = radar.hasMatchingTransponder(id)
                if transponder_match and not abandonded then 
                    if constructData['kind'] == 5 then 
                        tempRadarStats['friendly'][constructData['size']] = tempRadarStats['friendly'][constructData['size']] + 1
                    end
                    local owner = radar.getConstructOwnerEntity(id)
                    if owner['isOrganization'] then
                        owner = system.getOrganization(owner['id'])
                        owner = string.format('%s',owner['tag'])
                    else
                        owner = system.getPlayerName(owner['id'])
                        owner = string.format('%s',owner)
                    end
                    constructData['name'] = string.format('[%s] %s',uniqueCode,owner)
                    radarFriendlies[id] = {[1] = constructData['name'], [2] = radar.getConstructWorldPos(id)}
                else
                    if constructData['kind'] == 5 and not abandonded then 
                        tempRadarStats['enemy'][constructData['size']] = tempRadarStats['enemy'][constructData['size']] + 1
                        if not friendlySIDs['sc-'..id] and tempclosestEnemy['dist'] < constructData['distance']*.000005 then
                            tempclosestEnemy['dist'] = constructData['distance']*.000005
                            tempclosestEnemy['id'] = coreID
                        end
                    end
                    radarFriendlies[id] = nil
                end
        
                if not constructData['name'] then constructData['name'] = string.format('[%s] %s',uniqueCode,name) end
                local high_value = contains(primaries,tostring(id))
                if not high_value and slave and master_primary == coreID then
                    high_value = coreID == tostring(master_primary)
                    constructData['name'] = string.format('[%s] %s',uniqueCode,'PRIMARY')
                end
                if scout_info[tostring(id)] then
                    constructData['name'] = string.format('[%s] %s',uniqueCode,scout_info[tostring(id)])
                end
                
                radarTrackingData[tostring(id)] = constructData
        
                local shown = false
                if (targetRadar or slave) and high_value then
                    if tostring(id) == radarSelected then
                        table.insert(primaryList,1,json.encode(constructData))
                    else 
                        table.insert(primaryList,json.encode(constructData))
                    end
                    shown = true
                end
        
                if not shown then
                    if tostring(id) == radarSelected then
                        table.insert(constructList,1,json.encode(constructData))
                    --elseif radarSelected == '0' and constructData['isIdentified'] then
                    --    table.insert(constructList,1,json.encode(constructData))
                    --elseif radarSelected ~= '0' and constructData['isIdentified'] then
                    --    table.insert(constructList,2,json.encode(constructData))
                    elseif radarFilter == 'All' and (not abandonded or not hideAbandonedCores) then
                        table.insert(constructList,json.encode(constructData))
                    elseif radarFilter == 'enemy' and not transponder_match then
                        table.insert(constructList,json.encode(constructData))
                    elseif radarFilter == 'identified' and constructData['isIdentified'] then
                        table.insert(constructList,json.encode(constructData))
                    elseif radarFilter == 'friendly' and transponder_match then
                        table.insert(constructList,json.encode(constructData))
                    elseif radarFilter == 'primary' and coreID == tostring(primary) then
                        table.insert(constructList,json.encode(constructData))
                    end
                end
        
                if n % 50 == 0 then coroutine.yield() end
                n = n + 1
            end
            data = data:gsub('"errorMessage":""','"errorMessage":"'..radarFilter..'-'..radarSort..'"')
            data = data:gsub('"constructsList":%[%]','"constructsList":['..table.concat(constructList,',')..']')
        
            primaryData = pData:gsub('"constructsList":%[%]','"constructsList":['..table.concat(primaryList,',')..']')
            
        
            radarStats = tempRadarStats
            radarWidgetData = data
            identifiedBy = localIdentifiedBy
            attackedBy = localAttackedBy
            closestEnemy = tempclosestEnemy
            return data
        end
        
        function RadarWidgetCreate(title)
            local _data = radar.getWidgetData()--updateRadar(radarFilter)
            local _panel = system.createWidgetPanel(title)
            local _widget = system.createWidget(_panel, "radar")
            local ID = system.createData(_data)
            system.addDataToWidget(ID, _widget)
            return ID,_panel
        end
        
        function globalDB(action)
            if write_db ~= nil then
                if action == 'get' then
                    if write_db.hasKey('printCombatLog') then printCombatLog = write_db.getIntValue('printCombatLog') == 1 end
                    if write_db.hasKey('dangerWarning') then dangerWarning = write_db.getIntValue('dangerWarning') end
                    if write_db.hasKey('validatePilot') then validatePilot = write_db.getIntValue('validatePilot') == 1 end
                    if write_db.hasKey('L_Shield_HP') then L_Shield_HP = write_db.getIntValue('L_Shield_HP') end
                    if write_db.hasKey('M_Shield_HP') then M_Shield_HP = write_db.getIntValue('M_Shield_HP') end
                    if write_db.hasKey('S_Shield_HP') then S_Shield_HP = write_db.getIntValue('S_Shield_HP') end
                    if write_db.hasKey('XS_Shield_HP') then XS_Shield_HP = write_db.getIntValue('XS_Shield_HP') end
                    if write_db.hasKey('max_radar_load') then max_radar_load = write_db.getIntValue('max_radar_load') end
        
                    if write_db.hasKey('minimalWidgets') then minimalWidgets = write_db.getIntValue('minimalWidgets') == 1 end
                    if write_db.hasKey('weaponWidgets') then weaponWidgets = write_db.getIntValue('weaponWidgets') == 1 end
                    if write_db.hasKey('pilotSeat') then pilotSeat = write_db.getIntValue('pilotSeat') == 1 end
                    if write_db.hasKey('dmgAvgDuration') then dmgAvgDuration = write_db.getIntValue('dmgAvgDuration') end
                    if write_db.hasKey('slave') then slave = write_db.getIntValue('slave') == 1 end
        
                    for _,key in pairs(write_db.getKeyList()) do
                        if string.starts(key,'sc-') then
                            local id = string.sub(key,4)
                            friendlySIDs[tonumber(id)] = write_db.getStringValue(string.format('sc-%s',id))
                        end
                    end
        
                elseif action == 'save' then
                    write_db.setStringValue('uc-'..validPilotCode,pilotName)
                    if printCombatLog then write_db.setIntValue('printCombatLog',1) else write_db.setIntValue('printCombatLog',0) end
                    write_db.setIntValue('dangerWarning',dangerWarning)
                    if validatePilot then write_db.setIntValue('validatePilot',1) else write_db.setIntValue('validatePilot',0) end
                    write_db.setIntValue('L_Shield_HP',L_Shield_HP)
                    write_db.setIntValue('M_Shield_HP',M_Shield_HP)
                    write_db.setIntValue('S_Shield_HP',S_Shield_HP)
                    write_db.setIntValue('XS_Shield_HP',XS_Shield_HP)
                    write_db.setIntValue('max_radar_load',max_radar_load)
                    if slave then write_db.setIntValue('slave',1) else write_db.setIntValue('slave',0) end
        
                    if minimalWidgets then write_db.setIntValue('minimalWidgets',1) else write_db.setIntValue('minimalWidgets',0) end
                    if weaponWidgets then write_db.setIntValue('weaponWidgets',1) else write_db.setIntValue('weaponWidgets',0) end
                    if pilotSeat then write_db.setIntValue('pilotSeat',1) else write_db.setIntValue('pilotSeat',0) end
                    write_db.setIntValue('dmgAvgDuration',dmgAvgDuration)
        
                end
            end
        end
        
        function weaponsWidget()
            local ww = {}
            ww[#ww+1] = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            local wtext = {}
            if weapon_size > 0 then
                local wStatus = {[1] = 'Idle', [2] = 'Firing', [4] = 'Reloading', [5] = 'Unloading'}
                ww[#ww+1] = [[
                    <line x1="]].. 0.02*screenWidth ..[[" y1="]].. 0.665*screenHeight ..[[" x2="]].. 0.15*screenWidth ..[[" y2="]].. 0.665*screenHeight ..[[" style="stroke:lightgrey;stroke-width:0.25;opacity:]].. 1 ..[[;" />
                    ]]
                local offset = 1
                for i,w in pairs(weapon) do
                    local textColor = 'white'
                    local ammoColor = 'white'
                    local probColor = 'rgb(255, 60, 60)'
                    if w.isOutOfAmmo() then ammoColor = 'rgb(255, 60, 60)' end
        
                    local probs = w.getHitProbability()
                    if probs > .7 then probColor = 'rgb(60, 255, 60)' elseif probs > .5 then probColor = 'yellow' end
                    
                    local weaponName = w.getName():lower()
        
                    local matches = {}
                    for w in weaponName:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                    local prefix = matches[1]:sub(1,1) .. matches[2]:sub(1,1)
                    local wtype = ''
                    if string.find(weaponName,'cannon') then wType = 'Cannon'
                    elseif string.find(weaponName,'railgun') then wType = 'Railgun'
                    elseif string.find(weaponName,'missile') then wType = 'Missile'
                    elseif string.find(weaponName,'laser') then wType = 'Laser'
                    elseif string.find(weaponName,'stasis') then wType = 'Stasis'
                    end
                    if wType == 'Stasis' then
                        weaponName = wType
                    else
                        weaponName = prefix .. wType
                    end
        
                    local atn = w.getAmmo()
                    local ammoType = 'Not loaded'
                    if atn ~= 0 then
                        ammoType = system.getItem(w.getAmmo())
                        ammoType = tostring(ammoType['name']):lower()
                        if wType ~= 'Stasis' and weaponData[w.getLocalId()] and bootTimer >= 2 and not weaponWidgets then
                            for k,weapon in pairs(weaponData) do
                                system.destroyWidget(weapon['widget'])
                                weapon['widget'] = nil
                                weapon['shown'] = false
                            end
                        end
                    elseif wType ~= 'Stasis' and atn == 0 then
                        if not weaponData[w.getLocalId()] and bootTimer >= 2 then
                            local _widget = system.createWidget(weaponPanel, weaponData[w.getLocalId()]['type'])
                            weaponData[w.getLocalId()]['widget'] = _widget
                            system.addDataToWidget(weaponData[w.getLocalId()]['Data'],_widget)
                            weaponData[w.getLocalId()]['shown'] = true
                        end
                    end
                    ammoTypeColor = 'white'
                    if string.find(ammoType,'antimatter') then ammoTypeColor = 'rgb(56, 255, 56)' ammoType = 'Antimatter'
                    elseif string.find(ammoType,'electromagnetic') then ammoTypeColor = 'rgb(27, 255, 217)' ammoType = 'ElectroMagnetic'
                    elseif string.find(ammoType,'kinetic') then ammoTypeColor = 'rgb(255, 75, 75)' ammoType = 'Kinetic'
                    elseif string.find(ammoType,'thermic') then ammoTypeColor = 'rgb(255, 234, 41)' ammoType = 'Thermic'
                    end
                    local weaponStr = string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring((0.66 - 0.015*i) * screenHeight) ..'px;left: '.. tostring(0.02* screenWidth) ..'px;"><div style="float: left;color: white;">%s |&nbsp;</div><div style="float: left;color:%s;"> %.2f%% </div><div style="float: left;color: %s;"> | %s |&nbsp;</div><div style="float: left;color: %s;"> '..ammoType..'&nbsp;</div><div style="float: left;color: %s;">(%s) </div></div>',weaponName,probColor,probs*100,textColor,wStatus[w.getStatus()],ammoTypeColor,ammoColor,w.getAmmoCount())
                    wtext[#wtext+1] = weaponStr
                    offset = i
                end
                wtext = table.concat(wtext,'')
                offset = offset + 1
                ww[#ww+1] = [[
                    <line x1="]].. 0.02*screenWidth ..[[" y1="]].. (0.675-offset*0.015)*screenHeight ..[[" x2="]].. 0.15*screenWidth ..[[" y2="]].. (0.675-offset*0.015)*screenHeight ..[[" style="stroke:lightgrey;stroke-width:0.25;opacity:]].. 1 ..[[;" />
                    ]]
            end
            ww[#ww+1] = '</svg>' .. wtext
            return table.concat(ww,'')
        end
        
        function radarWidget()
            local temp_range = radar.getIdentifyRanges()
            if #temp_range > 0 then
                radarRange = temp_range[1]
            end
            local rw = {}
            local friendlyShipNum = radarStats['friendly']['L'] + radarStats['friendly']['M'] + radarStats['friendly']['S'] + radarStats['friendly']['XS']
            local enemyShipNum = radarStats['enemy']['L'] + radarStats['enemy']['M'] + radarStats['enemy']['S'] + radarStats['enemy']['XS']
            local radarRangeString = formatNumber(radarRange,'distance')
        
            local x, y, s
            if minimalWidgets then 
                y = -0.9
                x = 67.5
                s = 10
            else
                y = 78
                x = 29
                s = 11.25
            end
        
            rw[#rw+1] = string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.185 * screenHeight) ..'px;left: '.. tostring(.875 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">&nbsp;&nbsp;Identification Range:&nbsp;</div><div style="float: left;color: rgb(25, 247, 255);">%s&nbsp;</div></div>]],radarRangeString)
          
        
            rw[#rw+1] = string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.15 * screenHeight) ..'px;left: '.. tostring(.90 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">Identified By:&nbsp;</div><div style="float: left;color: orange;">%.0f&nbsp;</div><div style="float: left;color: ]]..'white'..[[;">ships</div></div>]],identifiedBy)
        
            rw[#rw+1] = string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.165 * screenHeight) ..'px;left: '.. tostring(.90 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">&nbsp;&nbsp;Attacked By:&nbsp;</div><div style="float: left;color: rgb(255, 60, 60);">%.0f&nbsp;</div><div style="float: left;color: ]]..'white'..[[;">ships</div></div>]],attackedBy)
        
            rw[#rw+1] = [[
                <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 0 286 240" width="200">
                    <rect x="6%" y="6%" width="87%" height="60%" rx="1%" ry="1%" fill="rgba(100,100,100,.5)" />
                    <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                    <polygon style="stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 154 18 157"/>
                    <text style="fill: ]]..fontColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">Radar Information (]]..tostring(radarContactNumber)..[[)</text>
                ]]
                rw[#rw+1] = [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="54" x2="22" y2="77"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="73">Enemy Ships:</text>
                    <text style="fill: rgb(255, 60, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="137" y="73">]]..enemyShipNum..[[</text>
        
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="81" x2="22" y2="104"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="30" y="100">L:</text>
                    <text style="fill: rgb(255, 60, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="50" y="100">]]..radarStats['enemy']['L']..[[</text>
        
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="68" y="100">M:</text>
                    <text style="fill: rgb(255, 60, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="95" y="100">]]..radarStats['enemy']['M']..[[</text>
        
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="115" y="100">S:</text>
                    <text style="fill: rgb(255, 60, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="135" y="100">]]..radarStats['enemy']['S']..[[</text>
        
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="155" y="100">XS:</text>
                    <text style="fill: rgb(255, 60, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="185" y="100">]]..radarStats['enemy']['XS']..[[</text>
        
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="108" x2="22" y2="131"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="127">Friendly Ships:</text>
                    <text style="fill: rgb(60, 255, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="150" y="127">]]..friendlyShipNum..[[</text>
        
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="135" x2="22" y2="158"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="30" y="154">L:</text>
                    <text style="fill: rgb(60, 255, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="50" y="154">]]..radarStats['friendly']['L']..[[</text>
        
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="68" y="154">M:</text>
                    <text style="fill: rgb(60, 255, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="95" y="154">]]..radarStats['friendly']['M']..[[</text>
        
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="115" y="154">S:</text>
                    <text style="fill: rgb(60, 255, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="135" y="154">]]..radarStats['friendly']['S']..[[</text>
        
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="155" y="154">XS:</text>
                    <text style="fill: rgb(60, 255, 60); font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="185" y="154">]]..radarStats['friendly']['XS']..[[</text>
                ]]
        
                rw[#rw+1] = '</svg>'
        
            if attackedBy >= dangerWarning or showAlerts then
                warnings['attackedBy'] = 'svgWarning'
            else
                warnings['attackedBy'] = nil
            end
        
            if not closestEnemy['dist'] then closestEnemy['dist'] = 2 end
            if closestEnemy['dist'] < 1.35 and closestEnemy['dist'] > 0 and not inSZ then
                warnings['closestEnemy'] = 'svgWarning'
            else
                warnings['closestEnemy'] = nil
            end
        
            return table.concat(rw,'')
        end
        
        function identifiedWidget()
            local id = radar.getTargetId()
            local iw = {}
            if id ~= 0 then
                if targetID == 0 then warnings['cored'] = nil warnings['friendly'] = nil end
        
                local targetSpeedSVG = ''
        
                local size = radar.getConstructCoreSize(id)
                local dmg = 0
                if write_db and dmgTracker[tostring(id)] then write_db.setFloatValue('damage - ' .. tostring(id) .. ' - ' .. pilotName,dmgTracker[tostring(id)]) end
                if #db > 0 then
                    for _,dbName in pairs(db) do
                        for _,key in pairs(dbName.getKeyList()) do
                            if string.starts(key,'damage - ' .. tostring(id)) then
                                dmg = dmg + dbName.getFloatValue(key)
                            end
                        end
                    end
                end
                if (dmg == 0 or not write_db) and dmgTracker[tostring(id)] then dmg = dmgTracker[tostring(id)] end
                local dmgRatio = clamp(dmg/shieldDmgTrack[size],0,1)
                if dmg < 1000 then dmg = string.format('%.2f',dmg)
                elseif dmg < 1000000 then dmg = string.format('%.2fk',dmg/1000)
                else dmg = string.format('%.2fm',dmg/1000000)
                end
        
                local tMatch = radar.hasMatchingTransponder(id)
                local shipIDMatch = false
                if useShipID then for k,v in pairs(friendlySIDs) do if id == k then shipIDMatch = true end end end
                local friendly = tMatch or shipIDMatch
        
                local abandonded = radar.isConstructAbandoned(id)
                local cardFill = 'rgba(175, 75, 75, 0.30)'
                local cardText = 'rgba(225, 250, 265, 1)'
                if friendly then cardFill = 'rgba(25, 25, 50, 0.35)' cardText = 'rgba(225, 250, 265, 1)'
                elseif abandonded then cardFill = '	rgba(169, 169, 169,.35)' cardText = 'black'
                end
        
                local distance = radar.getConstructDistance(id)
                local distString = formatNumber(distance,'distance')
        
                local name = radar.getConstructName(id)
                name = name:gsub("%%","")
                name = name:gsub("%%","")
                name = name:gsub("<","")
                name = name:gsub(">","")
                local uniqueCode = string.sub(tostring(id),-3)
                local shortName = name:sub(0,17)
                shortName = shortName:gsub('!','|')
        
                local lineColor = 'lightgrey'
                local targetIdentified = radar.isConstructIdentified(id)
        
        
                if abandonded or showAlerts then warnings['cored'] = 'svgTarget' else warnings['cored'] = nil end
                if friendly or showAlerts then warnings['friendly'] = 'svgGroup' else warnings['friendly'] = nil end
        
                local speedVec = vec3(construct.getWorldVelocity())
                local mySpeed = speedVec:len() * 3.6
                local myMass = construct.getMass()
        
                local targetSpeedString = 'Not Identified'
                local angularSpeedString = 'Not Identified'
                if targetIdentified then
                    targetSpeed = radar.getConstructSpeed(id) * 3.6 targetSpeedString = formatNumber(targetSpeed,'speed')
                    angularSpeedString = formatNumber(radar.getConstructAngularSpeed(id),'angVel')
                end
                local speedDiff = 0
                if targetIdentified then speedDiff = mySpeed-targetSpeed end
                
                local targetSpeedColor = 'white'
                if targetIdentified then
                    if speedDiff < -1000 then targetSpeedColor = 'rgb(255, 60, 60)'
                    elseif speedDiff > 1000 then targetSpeedColor = 'rgb(56, 255, 56)'
                    end
                end
                targetSpeedSVG = [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="54" x2="22" y2="77"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="73">Speed:</text>
                    <text style="fill: ]]..targetSpeedColor..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="84" y="73">]]..targetSpeedString..[[</text>
                ]]
        
                local updateTimer = false
                if arkTime - lastUpdateTime > 0.5 and lastUpdateTime ~= 0 then 
                    lastUpdateTime = arkTime
                    updateTimer = true
                elseif lastUpdateTime == 0 then
                    lastUpdateTime = arkTime
                    lastDistance = distance
                end
        
                if updateTimer then
                    local localGapCompare = 'Stable'
                    local gap = distance - lastDistance
                    if gap < -250 then localGapCompare = 'Closing' 
                    elseif gap > 250 then localGapCompare = 'Parting'
                    end
                    gapCompare = localGapCompare
                    lastDistance = distance
                end
                local gapColor = 'white'
                if gapCompare == 'Closing' then gapColor = 'rgb(56, 255, 56)' elseif gapCompare == 'Parting' then gapColor = 'rgb(255, 60, 60)' end
                local distanceCompareSVG = [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="81" x2="22" y2="104"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="100">Gap:</text>
                    <text style="fill: ]]..gapColor..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="69" y="100">]]..tostring(gapCompare)..[[</text>
                ]]
        
                if updateTimer and targetIdentified then
                    local localSpeedCompare = 'No Change'
                    if lastSpeed then
                        local speedChange = targetSpeed - lastSpeed
                        if speedChange < -100 then localSpeedCompare = 'Braking'
                        elseif speedChange > 100 then localSpeedCompare = 'Accelerating'
                        end
                        speedCompare = localSpeedCompare
                    end
                    lastSpeed = targetSpeed
                elseif not targetIdentified then
                    speedCompare = 'Not Identified'
                end
                local speedCompareColor = 'white'
                if speedCompare == 'Braking' then speedCompareColor = 'rgb(255, 60, 60)' elseif speedCompare == 'Accelerating' then speedCompareColor = 'rgb(56, 255, 56)' end
                local speedCompareSVG = [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="108" x2="22" y2="131"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="127">&#8796;Speed:</text>
                    <text style="fill: ]]..speedCompareColor..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="99" y="127">]]..tostring(speedCompare)..[[</text>
                ]]
        
                local dmgSVG = [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="135" x2="22" y2="158"/>
                    <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="154">Damage:</text>
                    <text style="fill: orange; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="99" y="154">]]..string.format('%s (%.2f%%)',dmg,(1-dmgRatio)*100)..[[</text>
                ]]
        
                --local mass = radar.getConstructMass(id)
                local topSpeed = radarTrackingData[tostring(id)] ~= nil
                local topSpeedSVG = ''
                if topSpeed then
                    if radarTrackingData[tostring(id)]['topSpeed'] > 0 then
                        topSpeedSVG = [[
                            <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="162" x2="22" y2="185"/>
                            <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="181">Mass:</text>
                            <text style="fill: orange; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="110" y="181">]]..formatNumber(radarTrackingData[tostring(id)]['mass'],'mass')..[[</text>
                        ]]
                    end
                end
        
                local info = radar.getConstructInfos(id)
                local weapons = 'False'
                if info['weapons'] ~= 0 then weapons = 'True' end
                local dataSVG = ''
                if targetIdentified then
                    dataSVG = [[
                        <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey;" x1="22" y1="189" x2="22" y2="212"/>
                        <text style="fill: white; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="208">Armed:</text>
                        <text style="fill: orange; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="95" y="208">]]..weapons..[[</text>
                    ]]
                end
        
                local owner = ''
                if radar.hasMatchingTransponder(id) then
                    owner = radar.getConstructOwnerEntity(id)
                    if owner['isOrganization'] then
                        owner = system.getOrganization(owner['id'])
                        owner = owner['tag']
                    else
                        owner = system.getPlayerName(owner['id'])
                    end
                elseif friendlySIDs[id] then
                    owner = friendlySIDs[id]
                end
                if owner ~= '' then 
                    owner = [[<text style="fill: white; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="5">]]..string.format('Owned by: %s (%s)',owner,id)..[[</text>]]
                end
        
                local x,y,s
                y = 3.5
                x = 11
                s = 11.25
                iw[#iw+1] = [[
                    <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 -10 286 240" width="200">
                        ]]..owner..[[
                        <rect x="6%" y="6%" width="87%" height="90%" rx="1%" ry="1%" fill="rgba(100,100,100,.9)" />
                        <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..cardFill..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                        <polygon style="stroke-linejoin: round; fill: ]]..cardFill..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 225 18 227"/>
                        <text style="fill: ]]..cardText..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">]]..string.format('%s - [%s] %s (%s)',size,uniqueCode,shortName,distString)..[[</text>
                        ]]..targetSpeedSVG..[[
                        ]]..distanceCompareSVG..[[
                        ]]..speedCompareSVG..[[
                        ]]..dmgSVG
        
                if topSpeedSVG then
                    iw[#iw+1] = topSpeedSVG .. dataSVG
                end
        
                iw[#iw+1] = [[
                    </svg>
                ]]
        
                if targetIndicators or showAlerts then
                    iw[#iw+1] = [[
                        <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                            <svg width="]].. tostring(.03 * screenWidth) ..[[" height="]].. tostring(.03 * screenHeight) ..[[" x="]].. tostring(.30 * screenWidth) ..[[" y="]].. tostring(.50 * screenHeight) ..[[" style="fill: ]]..speedCompareColor..[[;">
                                ]]..warningSymbols['svgTarget']..[[
                            </svg>
                            <text x="]].. tostring(.327 * screenWidth) ..[[" y="]].. tostring(.51 * screenHeight) .. [[" style="fill: white;" font-size="1.7vh" font-weight="bold">Speed Change:</text>
                            <text x="]].. tostring(.390 * screenWidth) ..[[" y="]].. tostring(.51 * screenHeight) .. [[" style="fill: ]]..speedCompareColor..[[;" font-size="1.7vh" font-weight="bold">]]..speedCompare..[[</text>
                            <text x="]].. tostring(.359 * screenWidth) ..[[" y="]].. tostring(.53 * screenHeight) .. [[" style="fill: white;" font-size="1.7vh" font-weight="bold">Speed: </text>
                            <text x="]].. tostring(.390 * screenWidth) ..[[" y="]].. tostring(.53 * screenHeight) .. [[" style="fill: ]]..speedCompareColor..[[;" font-size="1.7vh" font-weight="bold">]]..targetSpeedString..[[</text>
                            <text x="]].. tostring(.3525 * screenWidth) ..[[" y="]].. tostring(.55 * screenHeight) .. [[" style="fill: white;" font-size="1.7vh" font-weight="bold">Angular: </text>
                            <text x="]].. tostring(.390 * screenWidth) ..[[" y="]].. tostring(.55 * screenHeight) .. [[" style="fill: ]]..speedCompareColor..[[;" font-size="1.7vh" font-weight="bold">]]..angularSpeedString..[[</text>
                        </svg>
                    ]]
                end
            end
            return table.concat(iw,'')
        end
        
        function dpsWidget()
            local cDPS = 0
            local dmgTime = tonumber(string.format('%.0f',arkTime))
            for k,v in pairs(dpsChart) do
                if k < dmgTime - dmgAvgDuration then
                    dpsChart[k] = nil
                else
                    cDPS = cDPS + dpsChart[k]
                end
            end
            cDPS = cDPS/dmgAvgDuration
        
            local dw = string.format([[<svg width="100%%" height="100%%" style="position: absolute;left:0%%;top:0%%;viewBox="0 0 1920 1080">
                        <text x="1.92" y="85" style="fill: lightgreen;" font-size="1.42vh" font-weight="bold">DPS: %.1fk</text></svg>
            ]],cDPS/1000)
            return dw
        end
        
        function warningsWidget()
            local ww = {}
            ww[#ww+1] = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            local warningText = {}
            warningText['attackedBy'] = string.format('%.0f ships attacking',attackedBy)
            warningText['cored'] = 'Target is Destroyed'
            warningText['friendly'] = 'Target is Friendly'
            warningText['noRadar'] = 'No Radar Linked'
            warningText['venting'] = 'Shield Venting'
            warningText['radar_delta'] = string.format('Radar Delay %.2fs',cr_delta)
            warningText['closestEnemy'] = string.format('Enemy (%s) at %.2fsu',closestEnemy['id'],closestEnemy['dist'])
        
            local warningColor = {}
            warningColor['attackedBy'] = 'red'
            warningColor['cored'] = 'orange'
            warningColor['friendly'] = 'green'
            warningColor['noRadar'] = 'red'
            warningColor['venting'] = shieldHPColor
            warningColor['radar_delta'] = 'orange'
            warningColor['closestEnemy'] = 'orange'
        
            local count = 0
            local y = .06
            if minimalWidgets then y = .14 end
            for k,v in pairs(warnings) do
                if v ~= nil then
                    if k == 'closestEnemy' and closestEnemy['dist'] < 1.1 then
                        warningColor['closestEnemy'] = 'red'
                        ww[#ww+1] = string.format([[
                            <svg width="]].. tostring(.03 * screenWidth) ..[[" height="]].. tostring(.03 * screenHeight) ..[[" x="]].. tostring(0.45 * screenWidth) ..[[" y="]].. tostring(0.40 * screenHeight) ..[[" style="fill: ]]..warningColor[k]..[[;">
                                ]]..warningSymbols[v]..[[
                            </svg>
                            <text x="]].. tostring(.477 * screenWidth) ..[[" y="]].. tostring(0.42 * screenHeight) .. [[" style="fill: ]]..warningColor[k]..[[;" font-size="2vh" font-weight="bold">]]..warningText[k]..[[</text>
                            ]])
                    else
                        ww[#ww+1] = string.format([[
                            <svg width="]].. tostring(.03 * screenWidth) ..[[" height="]].. tostring(.03 * screenHeight) ..[[" x="]].. tostring(.65 * screenWidth) ..[[" y="]].. tostring(y * screenHeight + .032 * screenHeight * count) ..[[" style="fill: ]]..warningColor[k]..[[;">
                                ]]..warningSymbols[v]..[[
                            </svg>
                            <text x="]].. tostring(.677 * screenWidth) ..[[" y="]].. tostring((y+.02) * screenHeight + .032 * screenHeight * count) .. [[" style="fill: ]]..warningColor[k]..[[;" font-size="1.7vh" font-weight="bold">]]..warningText[k]..[[</text>
                            ]])
                        count = count + 1
                    end
                end
            end
            ww[#ww+1] = '</svg>'
            return table.concat(ww,'')
        end
        
        function generateHTML()
            local htmlTable = {}
            htmlTable[#htmlTable+1] = [[
            <html>
                <style>
                    body {
                        font-family: 'Roboto', sans-serif;
                        color: #e6e6e6;
                        margin: 0;
                        overflow: hidden;
                    }
                    svg {
                        filter: drop-shadow(0px 0px 5px rgba(0, 255, 255, 0.5));
                    }
                    .widget {
                        stroke-width: 2;
                    }
                    .text {
                        fill: #e6e6e6;
                    }
                </style>
                <body>]]
            htmlTable[#htmlTable+1] =  arHTML
            if showScreen then
                if weapon_1 then htmlTable[#htmlTable+1] = weaponHTML end
                if radar then htmlTable[#htmlTable+1] = radarHTML end
                if radar then htmlTable[#htmlTable+1] = identHTML end
                if weapon_1 then htmlTable[#htmlTable+1] = dpsHTML end
            end
            htmlTable[#htmlTable+1] = warningsHTML
            htmlTable[#htmlTable+1] = [[ </body> </html> ]]
            system.setScreen(table.concat(htmlTable, ''))
        end
        

    onUpdate:
      lua: |
        constructPosition = vec3(construct.getWorldPosition())
        arkTime = system.getArkTime()
        
        -- Radar Updates --
        
        if write_db then
            --system.print(string.format('%s',write_db.hasKey('record')))
            if write_db.hasKey('record') and write_db.getIntValue('record') == 1 then recordAll = true else recordAll = false end
        end
        
        if radar_1 and cr == nil then
            cr = coroutine.create(updateRadar)
        elseif cr ~= nil then
            if coroutine.status(cr) ~= "dead" and coroutine.status(cr) == "suspended" then
                coroutine.resume(cr,radarFilter)
            elseif coroutine.status(cr) == "dead" then
                cr = nil
                system.updateData(radarDataID,radarWidgetData)
                if targetRadar or slave then system.updateData(primaryRadarID,primaryData) end
                if not cr_time then
                    cr_time = arkTime
                else
                    cr_delta = arkTime - cr_time
                    cr_time = arkTime
                    if cr_delta > 1 or showAlerts then
                        warnings['radar_delta'] = 'svgCritical'
                    else
                        warnings['radar_delta'] = nil
                    end
                end
            end
        end
        ---- End Radar Updates ----
        
        
        if screen_update % 4 == 0 then
            -- Generate on screen combat points for Augmented Reality view --
            AR_Generate = {}
            local tID = radar_1.getTargetId()
            if ar_mode == 'ALL' then
                if write_db then
                    for _,key in pairs(write_db.getKeyList()) do
                        if string.starts(key,'abnd-') and not string.starts(key,'abnd-name-') then
                            abndPos = write_db.getStringValue(key)
                            local abndVec = convertWaypoint(abndPos)
                            local dist = vec3(abndVec - constructPosition):len()*0.000005
                            if radar_1 and dist < 1.95 then
                                if radar_1.getConstructDistance(string.sub(key,6)) ~= 0 then
                                    if write_db.hasKey(string.gsub(key,'abnd','kill')) then
                                        table.insert(AR_Generate,{[1]='[KILL] '..write_db.getStringValue(string.gsub(key,'-','-name-')), [2] = abndVec})
                                    else
                                        table.insert(AR_Generate,{[1]='[CORED] '..write_db.getStringValue(string.gsub(key,'-','-name-')), [2] = abndVec})
                                    end
                                elseif not inSZ then
                                    system.print('-- Removing '.. write_db.getStringValue(string.gsub(key,'-','-name-')) ..' ('.. write_db.getStringValue(key) ..')')
                                    write_db.clearValue(string.gsub(key,'-','-name-'))
                                    write_db.clearValue(key)
                                end
                            else
                                table.insert(AR_Generate,{[1]='[CORED] '..write_db.getStringValue(string.gsub(key,'-','-name-')), [2] = abndVec})
                            end
                        end
                    end
                end
                if FC then
                    if radar_1.hasMatchingTransponder(FC) then
                        local temp = radar_1.getConstructWorldPos(FC)
                        fc_pos = string.format('::pos{0,0,%.2f,%.2f,%.2f}',temp[1],temp[2],temp[3])
                        table.insert(AR_Generate,{[1]='Fleet Commander', [2] = convertWaypoint(fc_pos)})
                    elseif fc_pos then
                        table.insert(AR_Generate,{[1]='Fleet Commander [LAST KNOWN]', [2] = convertWaypoint(fc_pos)})
                    end
                end
                if SL then
                    if radar_1.hasMatchingTransponder(SL) then
                        local temp = radar_1.getConstructWorldPos(SL)
                        sl_pos = string.format('::pos{0,0,%.2f,%.2f,%.2f}',temp[1],temp[2],temp[3])
                        table.insert(AR_Generate,{[1]='Squad Leader', [2] = convertWaypoint(sl_pos)})
                    elseif sl_pos then
                        table.insert(AR_Generate,{[1]='Squad Leader [LAST KNOWN]', [2] = convertWaypoint(sl_pos)})
                    end
                end
                if manual_trajectory then
                    local rem = {}
                    for tID,tbl in pairs(manual_trajectory) do
                        for i,v in pairs(manual_trajectory[tostring(tID)]) do
                            local tDelta = arkTime-v['ts']
                            if tDelta > 5*60 then 
                                table.insert(rem,i,1)
                            else
                                table.insert(AR_Generate,{[1]=string.format('T-%.0f [%s]',tDelta,string.sub(tostring(tID),-3)), [2] = v['pos']})
                            end
                        end
                        if #rem > 0 then
                            for _,i in pairs(rem) do 
                                table.remove(manual_trajectory[tostring(tID)],i)
                            end
                        end
                    end
                    for id,v in pairs(trajectory_calc) do
                        local dist = v['speed']*(arkTime-v['ts'])
                        table.insert(AR_Generate,{[1]=string.format('Location [%s]',string.sub(tostring(id),-3)), [2] = v['p1'] + dist*(v['p2']-v['p1'] )/vec3(v['p2']-v['p1'] ):len()})
                    end
                end
                for k,v in pairs(radarFriendlies) do
                    local temp_pos = string.format('::pos{0,0,%.2f,%.2f,%.2f}',v[2][1],v[2][2],v[2][3])
                    table.insert(AR_Generate,{[1]=v[1], [2] = convertWaypoint(temp_pos)})
                end
            elseif ar_mode == 'FLEET' then
                if FC then
                    if radar_1.hasMatchingTransponder(FC) then
                        local temp = radar_1.getConstructWorldPos(FC)
                        fc_pos = string.format('::pos{0,0,%.2f,%.2f,%.2f}',temp[1],temp[2],temp[3])
                        table.insert(AR_Generate,{[1]='Fleet Commander', [2] = convertWaypoint(fc_pos)})
                    elseif fc_pos then
                        table.insert(AR_Generate,{[1]='Fleet Commander [LAST KNOWN]', [2] = convertWaypoint(fc_pos)})
                    end
                end
                if SL then
                    if radar_1.hasMatchingTransponder(SL) then
                        local temp = radar_1.getConstructWorldPos(SL)
                        sl_pos = string.format('::pos{0,0,%.2f,%.2f,%.2f}',temp[1],temp[2],temp[3])
                        table.insert(AR_Generate,{[1]='Squad Leader', [2] = convertWaypoint(sl_pos)})
                    elseif sl_pos then
                        table.insert(AR_Generate,{[1]='Squad Leader [LAST KNOWN]', [2] = convertWaypoint(sl_pos)})
                    end
                end
                local rem = {}
                for id,tbl in pairs(manual_trajectory) do
                    for i,v in pairs(manual_trajectory[tostring(id)]) do
                        local tDelta = arkTime-v['ts']
                        if tDelta > 5*60 then 
                            table.insert(rem,i,1)
                        else
                            table.insert(AR_Generate,{[1]=string.format('T-%.0f [%s]',tDelta,string.sub(tostring(id),-3)), [2] = v['pos']})
                        end
                    end
                    if #rem > 0 then
                        for _,i in pairs(rem) do 
                            table.remove(manual_trajectory[tostring(id)],i)
                        end
                    end
                end
                for id,v in pairs(trajectory_calc) do
                    local dist = v['speed']*(arkTime-v['ts'])
                    table.insert(AR_Generate,{[1]=string.format('Location [%s]',string.sub(tostring(id),-3)), [2] = v['p1'] + dist*(v['p2']-v['p1'] )/vec3(v['p2']-v['p1'] ):len()})
                end
            elseif ar_mode == 'ABANDONDED' then
                if write_db then
                    for _,key in pairs(write_db.getKeyList()) do
                        if string.starts(key,'abnd-') and not string.starts(key,'abnd-name-') then
                            abndPos = write_db.getStringValue(key)
                            table.insert(AR_Generate,{[1]='[CORED] '..write_db.getStringValue(string.gsub(key,'-','-name-')), [2] = convertWaypoint(abndPos)})
                        end
                    end
                end
            end
            ARSVG = {}
            ARSVG[#ARSVG+1] = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            for _,v in pairs(AR_Generate) do
                local name = v[1]
                local pos = v[2]
                local pDist = vec3(pos - constructPosition):len()
                if (pDist*0.000005 < abandonedCoreDist and (pDist*0.000005 > 1.95 or inSZ or string.starts(name,'[KILL]')) ) or (string.starts(name,'[') and not string.starts(name,'[CORED]')) or string.starts(name,'Fleet Commander') or string.starts(name,'Squad Leader') or string.starts(name,'T-') or string.starts(name,'Location ') then 
                    local pInfo = library.getPointOnScreen({pos['x'],pos['y'],pos['z']})
        
                    if pInfo[3] ~= 0 then
                        if pInfo[1] < .01 then pInfo[1] = .01 end
                        if pInfo[2] < .01 then pInfo[2] = .01 end
                        local fill = AR_Fill
                        if string.starts(name,'[CORED]') then fill = 'rgb(144,144,144)'
                        elseif string.starts(name,'Fleet Commander') then fill = 'rgb(186,85,211)'
                        elseif string.starts(name,'Squad Leader') then fill = 'rgb(30, 144, 255)'
                        end
                        local translate = '(0,0)'
                        local depth = AR_Size * 1/(0.02*pDist*0.000005)
                        local pDistStr = ''
                        if pDist < 1000 then pDistStr = string.format('%.2fm',pDist)
                        elseif pDist < 100000 then pDistStr = string.format('%.2fkm',pDist/1000)
                        else pDistStr = string.format('%.2fsu',pDist*0.000005)
                        end
                        if depth > AR_Size then depth = tostring(AR_Size) elseif depth < 1 then depth = '1' else depth = tostring(depth) end
                        if pInfo[1] < 1 and pInfo[2] < 1 then
                            translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight*pInfo[2])
                        elseif pInfo[1] > 1 and pInfo[1] < AR_Range and pInfo[2] < 1 then
                            translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*pInfo[2])
                        elseif pInfo[2] > 1 and pInfo[2] < AR_Range and pInfo[1] < 1 then
                            translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight)
                        else
                            translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                        end
                        if string.starts(name,'Squad Leader') or string.starts(name,'Fleet Commander') then
                            ARSVG[#ARSVG+1] = [[<g transform="translate]]..translate..[[">
                                    <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill:]]..fill..[[;stroke:]]..AR_Outline..[[;stroke-width:1;opacity:0.75;" />
                                    <line x1="0" y1="0" x2="]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:1;" />
                                    <line x1="]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:1;" />
                                    <text x="]]..tostring(depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: ]]..AR_Outline..[[" font-size="]]..tostring(.075*AR_Size)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                    </g>]]
                        elseif string.starts(name,'T-') then
                            ARSVG[#ARSVG+1] = [[<g transform="translate]]..translate..[[">
                                    <circle cx="0" cy="0" r="]].. depth*0.80 ..[[px" style="fill: rgba(255,150,0,0); stroke:rgba(255, 130, 0, .5);stroke-width:2;" />
                                    <line x1="0" y1="0" x2="-]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                    <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                    <text x="-]]..tostring(6*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: ]]..AR_Outline..[[" font-size="]]..tostring(.075*AR_Size)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                    </g>]]
                        elseif string.starts(name,'Location ') then
                            ARSVG[#ARSVG+1] = [[<g transform="translate]]..translate..[[">
                                    <circle cx="0" cy="0" r="]].. depth*0.80 ..[[px" style="fill: rgba(255,150,0,0); stroke:rgba(255, 255, 0, .5);stroke-width:2;" />
                                    <line x1="0" y1="0" x2="-]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                    <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                    <text x="-]]..tostring(6*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: ]]..AR_Outline..[[" font-size="]]..tostring(.075*AR_Size)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                    </g>]]
                        elseif string.starts(name,'[') and not string.starts(name,'[CORED]') and not string.starts(name,'[KILL]') then
                            ARSVG[#ARSVG+1] = [[<g transform="translate]]..translate..[[">
                                    <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill: rgba(255,150,0,0); stroke:rgba(255, 255, 255, .75);stroke-width:2;" />
                                    <line x1="0" y1="0" x2="-]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:1;" />
                                    <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:1;" />
                                    <text x="-]]..tostring(6*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: rgba(250, 250, 250, .90);" font-size="]]..tostring(.075*AR_Size)..[[vw">]]..string.format('%s',name)..[[</text>
                                    </g>]]
                        elseif string.starts(name,'[KILL]') then
                            ARSVG[#ARSVG+1] = [[<g transform="translate]]..translate..[[">
                                    <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="]].. depth*1.2 ..[[" y2="]].. depth*1.2 ..[[" style="stroke:rgba(125, 0, 0, 1);stroke-width:3;opacity:1;" />
                                    <line x1="]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]].. depth*1.2 ..[[" y2="]].. depth*1.2 ..[[" style="stroke:rgba(125, 0, 0, 1);stroke-width:3;opacity:1;" />
                                    <text x="-]]..tostring(2*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: rgba(250, 250, 250, .90);" font-size="]]..tostring(.075*AR_Size)..[[vw">]]..string.format('%s',name)..[[</text>
                                    </g>]]
                        else
                            ARSVG[#ARSVG+1] = [[<g transform="translate]]..translate..[[">
                                    <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill:]]..fill..[[;stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                    <line x1="0" y1="0" x2="-]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                    <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:]]..AR_Outline..[[;stroke-width:1;opacity:]]..AR_Opacity..[[;" />
                                    <text x="-]]..tostring(6*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: ]]..AR_Outline..[[" font-size="]]..tostring(.075*AR_Size)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                    </g>]]
                        end
                    end
                end
            end
            ARSVG[#ARSVG+1] = '</svg>'
            arHTML =  table.concat(ARSVG,'')
            -----------------------------------------------------------
        
            if bootTimer >= 2 then
                generateHTML()
            end
        end
        screen_update = screen_update + 1
    onInputText(text):
      lua: |
        if string.starts(text:lower(),'printcore') then
            local targetID = radar_1.getTargetId()
            if targetID ~= 0 then
                system.print(targetID)
            end
        end
        if string.starts(text:lower(),'addships') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches > 1 then
                id = matches[2]
                if radar_1.hasMatchingTransponder(id) then
                    local owner = radar_1.getConstructOwnerEntity(id)
                    if owner['isOrganization'] then
                        owner = system.getOrganization(owner['id'])
                        owner = owner['tag']
                    else
                        owner = system.getPlayerName(owner['id'])
                    end
                    friendlySIDs[id] = owner
                    write_db.setStringValue(string.format('sc-%s',id),owner)
                    system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                else
                    friendlySIDs[id] = 'Auto Add'
                    write_db.setStringValue(string.format('sc-%s',id),'Auto Add')
                    system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                end
            else
                for _,id in ipairs(radar_1.getConstructIds()) do
                    if radar_1.hasMatchingTransponder(id) then
                        local owner = radar_1.getConstructOwnerEntity(id)
                        if owner['isOrganization'] then
                            owner = system.getOrganization(owner['id'])
                            owner = owner['tag']
                        else
                            owner = system.getPlayerName(owner['id'])
                        end
                        friendlySIDs[id] = owner
                        write_db.setStringValue(string.format('sc-%s',id),owner)
                        system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                    else
                        friendlySIDs[id] = 'Auto Add'
                        write_db.setStringValue(string.format('sc-%s',id),'Auto Add')
                        system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                    end
                end
            end
        end
        if string.starts(text:lower(),'delshipid') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            local r = nil
            for k,v in pairs(friendlySIDs) do if k == matches[2] then r = k end end
            if r ~= nil then friendlySIDs[r] = nil end
            if write_db ~= nil and #matches == 2 then
                if write_db.hasKey('sc-' .. tostring(matches[2])) then write_db.setStringValue('sc-' .. tostring(matches[2]),nil) end
            end
            system.print('-- Construct removed from Friendly ID list --')
        end
        if type(tonumber(text)) == 'number' and (#text == 3 or text == '0') then
            if text == '0' then
                    system.print('-- Removing primary target filter --')
                    primary = nil
                    radarFilter = 'All'
                    if not slave and write_db then
                        write_db.clearValue('primaryTarget')
                    end
            else
                system.print(string.format('-- Adding primary target filter [%s] --',text))
                primary = tostring(text)
                radarFilter = 'primary'
                if not slave and write_db then
                    write_db.setStringValue('primaryTarget',tostring(text))
                end
            end
        end
        if text:lower() == 'print db' then
            if write_db ~= nil then
                system.print('-- DB READOUT START --')
                for _,key in pairs(write_db.getKeyList()) do
                    if string.find(write_db.getStringValue(key),'::pos') ~= nil or true then
                        system.print(string.format('%s: %s',key,write_db.getStringValue(key)))
                    end
                end
                system.print('-- DB READOUT END --')
            else
                system.print('-- NO DB ATTACHED --')
            end
        end
        if text:lower() == 'clear db' then
            if write_db ~= nil then
                write_db.clear()
                system.print('-- DB CLEARED --')
            else
                system.print('-- NO DB ATTACHED --')
            end
        end
        if text:lower() == 'coreid' then
            system.print(string.format('-- %.0f --',construct.getId()))
        end
        if text:lower() == 'clear damage' then
            system.print('-- Clearing damage dealt to target (this seat only) --')
            local targetID = radar_1.getTargetId()
            if targetID == 0 then
                system.print('-- No target selected --')
            else
                if write_db then
                    if write_db.hasKey('damage - ' .. tostring(targetID) .. ' - ' .. pilotName) then
                        write_db.clearValue('damage - ' .. tostring(targetID) .. ' - ' .. pilotName)
                        system.print('Cleared: ' .. 'damage - ' .. tostring(targetID) .. ' - ' .. pilotName)
                    end
                end
                dmgTracker[tostring(targetID)] = nil
                system.print('Cleared dmgTracker: ' .. tostring(targetID))
            end
        end
        if text:lower() == 'clear all damage' then
            system.print('-- Clearing all damage dealt (this seat only) --')
            dmgTracker = {}
            for _,dbName in pairs(db) do
                for _,key in pairs(dbName.getKeyList()) do
                    if string.starts(key,'damage - ') then
                        dbName.clearValue(key)
                    end
                end
            end
        end
        if text:lower() == 'print damage' then
            system.print('-- Printing all damage dealt --')
            for _,dbName in pairs(db) do
                for _,key in pairs(dbName.getKeyList()) do
                    if string.starts(key,'damage - ') then
                        system.print(string.format('%s: %.2f',key,dbName.getFloatValue(key)))
                    end
                end
            end
        end
        if string.starts(text,'/G') then
            if write_db ~= nil then
                local matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                local found = false
                if #matches > 2 then
                    for _,key in pairs(write_db.getKeyList()) do
                        if matches[2] == key then
                            found = true
                            write_db.setStringValue(key,matches[3])
                            write_db.setIntValue(key,tonumber(matches[3]))
                            globalDB('get')
                        end
                    end
                    if found then
                        system.print(string.format('Set "%s" to "%s"',matches[2],matches[3]))
                    else
                        system.print('-- INVALID VARIABLE NAME --')
                    end
                else
                    system.print('-- INVALID COMMAND FORMAT --')
                end
            else
                system.print('-- NO DATABANK --')
            end
        end
        if string.starts(text,'?') then
            if write_db ~= nil then
                local matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                if #matches > 1 then
                    system.print('-- DB READOUT START --')
                    for _,key in pairs(write_db.getKeyList()) do
                        if string.find(key,matches[2]) ~= nil then
                            system.print(string.format('%s = %s',key,write_db.getStringValue(key)))
                        end
                    end
                    system.print('-- DB READOUT END --')
                end
            else
                system.print('-- NO DB ATTACHED --')
            end
        end
        if string.starts(text:lower(),'abnd') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 2 then
                abandonedCoreDist = tonumber(matches[2])
                system.print('-- Set cored distance to '..tostring(matches[2])..' --')
            end
        end
        if string.starts(text:lower(), 'clear abnd') then
            local constructPosition = vec3(construct.getWorldPosition())
            if write_db then
                local clearID = nil
                local closest = nil
                for _,key in pairs(write_db.getKeyList()) do
                    if string.starts(key,'abnd-') and not string.starts(key,'abnd-name-') then
                        pos = convertWaypoint(write_db.getStringValue(key))
                        local pDist = vec3(pos - constructPosition):len()
                        if not closest then 
                            clearID = key
                            closest = pDist
                        elseif pDist < closest then
                            clearID = key
                            closest = pDist
                        end
                    end
                end
                if clearID then
                    system.print('-- Clearing '..clearID ..' --')
                    write_db.clearValue(clearID)
                    write_db.clearValue(string.gsub(clearID,'-','-name-'))
                end
            end
        end
        if text:lower() == 'setfc' then
            if not radar_1 then
                system.print('-- No radar --')
                FC = nil
            elseif radar_1.getTargetId() == 0 then
                system.print('-- No target --')
                FC = nil
            elseif not radar_1.hasMatchingTransponder(radar_1.getTargetId()) then
                system.print('-- Target does not have matching transponder --')
            else
                FC = radar_1.getTargetId()
                system.print('-- Set Fleet Commander --')
            end
        end
        if text:lower() == 'setsl' then
            if not radar_1 then
                system.print('-- No radar --')
                SL = nil
            elseif radar_1.getTargetId() == 0 then
                system.print('-- No target --')
                SL = nil
            elseif not radar_1.hasMatchingTransponder(radar_1.getTargetId()) then
                system.print('-- Target does not have matching transponder --')
            else
                SL = radar_1.getTargetId()
                system.print('-- Set Squad Leader --')
            end
        end
        if text:lower() == 'clear tracking' then
            system.print('-- Clearing tracked data --')
            manual_trajectory = {}
            trajectory_calc = {}
        end
        if text:lower() == 'add' then
            if not contains(primaries,tostring(radarSelected)) and radarSelected ~= '0' then
                system.print(string.format('-- Adding %s to primary radar--',radarSelected))
                table.insert(primaries,tostring(radarSelected))
            end
            for _,t in pairs(primaries) do
                system.print(t)
            end
        end
        if string.starts(text:lower(), 'a') and (#text == 4) and type(tonumber(string.sub(text,2))) then
            if not contains(primaries,string.sub(text,2)) then
                system.print(string.format('-- Adding %s to primary radar--',string.sub(text,2)))
                table.insert(primaries,string.sub(text,2))
            end
        end
        if string.starts(text:lower(), 'd') and (#text == 4 or #text == 2) and type(tonumber(string.sub(text,2))) then
            if string.sub(text,2) == '0' then
                system.print('-- Clearing Primary Radar --')
                primaries = {}
            else
                
                local r = nil
                for k,v in pairs(primaries) do
                    if v == string.sub(text,2) then r = k end
                end
                if r then
                    system.print(string.format('-- Removing %s from primary radar --',string.sub(text,2)))
                    table.remove(primaries,r)
                end
            end
        end
        if text:lower() == 'primary radar off' then
            targetRadar = false
            if primaryRadarPanelID then
                system.print('-- Disabling primary target radar widget --')
                system.destroyWidgetPanel(primaryRadarPanelID)
                primaryRadarPanelID = nil
            end
        end
        if text:lower() == 'primary radar on' then
            targetRadar = true
            if not primaryRadarPanelID then
                system.print('-- Enabling primary target radar --')
                primaryRadarID,primaryRadarPanelID = RadarWidgetCreate('PRIMARY TARGETS')
            end
        end
        
        if text:lower() == 'show weapons' then
            weaponWidgets = true
            for k,weapon in pairs(weaponData) do
                if not weapon['widget'] then
                    local _widget = nil
                    _widget = system.createWidget(weaponPanel, weapon['type'])
                    weapon['widget'] = _widget
                    system.addDataToWidget(weapon['Data'],_widget)
                    weapon['shown'] = true
                end
            end
            system.print('-- Showing available weapon widgets --')
        end
        
        if text:lower() == 'hide weapons' then
            weaponWidgets = false
            system.print('-- Hiding weapon widgets --')
            for k,weapon in pairs(weaponData) do
                system.destroyWidget(weapon['widget'])
                weapon['widget'] = nil
                weapon['shown'] = false
            end
            WeaponWidgetCreate(false)
        end
        if text:lower() == 'record' then
            recordAll = not recordAll
            if recordAll then
                db_1.setIntValue('record',1)
            else
                db_1.setIntValue('record',0)
            end
            system.print(string.format('-- Contact recording: %s --',recordAll))
        end
        if text == 'slave' then
            system.print('-- Slave Radar Primary: '..slaveRadarPrimary)
        end
    onActionStart:
      args: ['option2']
      lua: |
          if lShift then
              if ar_mode == 'ALL' then ar_mode = 'FLEET' system.print('-- AR Mode: FLEET --')
              elseif ar_mode == 'FLEET' then ar_mode = 'ABANDONDED' system.print('-- AR Mode: ABANDONDED --')
              elseif ar_mode == 'ABANDONDED' then ar_mode = 'TRAJECTORY' system.print('-- AR Mode: TRAJECTORY --')
              elseif ar_mode == 'TRAJECTORY' then ar_mode = 'NONE' system.print('-- AR Mode: NONE --')
              elseif ar_mode == 'NONE' then ar_mode = 'ALL' system.print('-- AR Mode: ALL --')
              end
          end
    onActionStart:
      args: ['option7']
      lua: |
          if lShift then
              if radarSort == 'Distance' then 
                  radarSort = 'Size' 
              else 
                  radarSort = 'Distance' 
              end
              system.print('-- Radar Sort: '..radarSort)
          else
              if radarFilter == 'All' then radarFilter = 'enemy' system.print('-- Radar: enemy --')
              elseif radarFilter == 'enemy' then radarFilter = 'identified' system.print('-- Radar: identified --')
              elseif radarFilter == 'identified' then radarFilter = 'friendly' system.print('-- Radar: friendly --')
              elseif radarFilter == 'friendly' then radarFilter = 'primary' system.print('-- Radar: primary --')
              elseif radarFilter == 'primary' then radarFilter = 'All' system.print('-- Radar: All --')
              end
          end

    onActionStart:
      args: ['lshift']
      lua: |
          showScreen = false
          lShift = true
    onActionStart:
      args: ['up']
      lua: |
          if radarRange > 40000 then
          
              local id = radar_1.getTargetId()
              local targetSelected = id ~= 0
              if targetSelected then
                  local tDist = radar_1.getConstructDistance(id)
                  local cam_fwd = vec3(system.getCameraWorldForward())
                  local cam_pos = vec3(system.getCameraWorldPos())
                  local cam_vec = vec3(cam_pos+cam_fwd)
                  local tLoc = cam_pos + tDist*(cam_vec-cam_pos)/vec3(cam_vec-cam_pos):len()
                  if manual_trajectory[tostring(id)] == nil then
                      manual_trajectory[tostring(id)] = {}
                  end
                  local temp = {['ts']=arkTime,['pos']=tLoc}
                  table.insert(manual_trajectory[tostring(id)],temp)
                  system.print(string.format('-- Position added = ::pos{0,0,%.4f,%.4f,%.4f}',tLoc.x,tLoc.y,tLoc.z))
                  if #manual_trajectory[tostring(id)] > 1 then
                      local length = #manual_trajectory[tostring(id)] + 1
                      local p2 = manual_trajectory[tostring(id)][length-2]['pos']
                      local p2Time = manual_trajectory[tostring(id)][length-2]['ts']
                      local distCalc = vec3(p2-tLoc):len()
                      local speed = distCalc/(arkTime - p2Time)*3.6
                      if speed > 2000 then
                          local trajectory = p2 + 20/.000005*(tLoc-p2 )/vec3(tLoc-p2 ):len()
                          trajectory_calc[tostring(id)] = {
                              ['p1'] = tLoc,
                              ['ts'] = arkTime,
                              ['speed'] = speed/3.6,
                              ['p2'] = trajectory
                          }
                          system.print(string.format('-- Target Calculated speed: %.0f km/h',speed))
                          system.setWaypoint(string.format('::pos{0,0,%.4f,%.4f,%.4f}',trajectory.x,trajectory.y,trajectory.z))
                      else
                          system.print('-- Target is close to stationary --')
                      end
                  end
              else
                  system.print('-- No target selected --')
              end
          end
              

    onActionStop:
      args: ['lshift']
      lua: |
          showScreen = true
          lShift = false
  weapon_1:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_1.getBaseDamage()
        local AT = system.getItem(weapon_1.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_1:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_1:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_1:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end
  weapon_2:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_1.getBaseDamage()
        local AT = system.getItem(weapon_1.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_2:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_2:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_2:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end
  weapon_3:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_1.getBaseDamage()
        local AT = system.getItem(weapon_1.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_3:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_3:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_3:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end
  weapon_4:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_1.getBaseDamage()
        local AT = system.getItem(weapon_1.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_4:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_4:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_4:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end
  weapon_5:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_1.getBaseDamage()
        local AT = system.getItem(weapon_1.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_5:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_5:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_5:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end
  weapon_6:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_1.getBaseDamage()
        local AT = system.getItem(weapon_1.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_6:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_6:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_6:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end
  weapon_7:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_7.getBaseDamage()
        local AT = system.getItem(weapon_7.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_7:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_7:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_7:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end
  weapon_8:
    onHit(targetId,damage):
      lua: |
        local baseDamage = weapon_8.getBaseDamage()
        local AT = system.getItem(weapon_8.getAmmo())
        AT = tostring(AT['name']):lower()
        if string.find(AT,'antimatter') then AT = 'Antimatter'
        elseif string.find(AT,'electromagnetic') then AT = 'ElectroMagnetic'
        elseif string.find(AT,'kinetic') then AT = 'Kinetic'
        elseif string.find(AT,'thermic') then AT = 'Thermic'
        end
        
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage (%.0f%% %s)',radar_1.getConstructName(targetId),damage,(1-damage/baseDamage)*100,AT))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  weapon_8:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_8:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_8:
    onDestroyed(targetId):
      lua: |
        if printCombatLog then
            system.print(string.format('<-- %s Cored by %s -->',radar_1.getConstructName(targetId),pilotName))
        end
        if write_db then
            write_db.setStringValue(string.format('kill-%s',targetId),string.format('%s Destroyed by %s',radar_1.getConstructName(targetId),pilotName))
        end