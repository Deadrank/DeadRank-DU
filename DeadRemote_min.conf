name: DeadRemote v5.0.14-minimal
slots:
    core:
        class: CoreUnit
    db:
        class: DataBank
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    shield:
        class: ShieldGeneratorUnit
        select: all
    transponder:
        class: TransponderUnit
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    gyro:
        class: GyroUnit

handlers:
  unit:
    onTimer:
      args: ['code']
      lua: |
          if transponder_1 ~= nil then
              tags = transponder_1.getTags()
              if not transponder_1.isActive() then transponder_1.activate() end
          end
          
          if transponder_1 and codeSeed then
              local a = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
              math.randomseed(tonumber(string.format('%.0f',codeSeed + system.getArkTime()/rollTimer)))
              local genCode = 'AGC'
              for i = 1,5 do
                  local c = math.random(1,string.len(a))
                  genCode = genCode .. string.sub(a,c,c)
              end
          
              if cOverlapTick > 5 then unit.stopTimer('overlap') end
          
              local cApplied = contains(tags,genCode)
              if genCode ~= tCode or not cApplied then
          
                  if cOverlapTick == 0 or cOverlapTick > 3 then 
                      local r = {}
                      for i,v in ipairs(tags) do
                          if string.starts(v,'AGC') then
                              table.insert(r,i)
                          end
                      end
                      for _,i in ipairs(r) do table.remove(tags,i) end
          
                      if cOverlapTick == 0 and tCode ~= nil then
                          cOverlapTick = 1
                          unit.setTimer('overlap',2)
                      end
                      if cOverlapTick >= 3 or tCode == nil then
                          unit.stopTimer('overlap')
                          tCode = genCode
                          cOverlapTick = 0
                          local r = {}
                          for i,v in ipairs(tags) do
                              if string.starts(v,'AGC') then
                                  table.insert(r,i)
                              end
                          end
                          for _,i in ipairs(r) do table.remove(tags,i) end
                          table.insert(tags,genCode)
                          transponder_1.setTags(tags)
                      else
                          table.insert(tags,genCode)
                          table.insert(tags,tCode)
                          transponder_1.setTags(tags)
                      end
                  end
              end
          end
    onTimer:
      args: ['overlap']
      lua: |
          cOverlapTick = cOverlapTick + 1
    onTimer:
      args: ['booster']
      lua: |
          boosterCount = boosterCount + 1
          local accelerating = false
          if boosterSpeedThreshold > speed then
              accelerating = true
          end
          if accelerating then
              if boosterCount % 3 == 0 then
                  if Nav.boosterState then 
                      --system.print('Boosters off')
                      Nav:toggleBoosters()
                  end
              else
                  if not Nav.boosterState then
                      --system.print('Boosters on')
                      Nav:toggleBoosters()
                  end
              end
          else
              system.print('Maintaining')
              if boosterCount % 3 == 0 then
                  if not Nav.boosterState then 
                      --system.print('Boosters on')
                      Nav:toggleBoosters()
                  end
              else
                  if Nav.boosterState then 
                      --system.print('Boosters off')
                      Nav:toggleBoosters()
                  end
              end
          end
    onStart:
      lua: |
        -- Add Valid User ID --
        masterPlayerID = player.getId()
        pilotName = system.getPlayerName(masterPlayerID)
        validPilotCode = '123456' --Your player ID
        ----------------------
        
        hudVersion = 'v5.0.14-min'
        system.print('-- '..hudVersion..' --')
        offset_points = false --export Puts additional position markers around your ship
        dampenerTorqueReduction = .01 --export 0 is no adjustors, 1 is full adjustors
        screenRefreshRate = 0.25 --export
        dataUpdateRatio = 3 --export Rate to update data whole number (shields, fuel, etc)
        useDB = true --export
        atmoManualLimit = 0 --export Manually limit speed in atmosphere
        validatePilot = false --export
        toggleBrakes = true --export
        autoVent = true --export Autovent shield at 0 hp
        dmgAvgDuration = 10 --export Duration to avg incoming damage over
        trackerMode = false --export Use input position tags as location trackers instead of auto-pilot
        trackerList = {}
        homeBaseLocation = '' --export Location of home base (to turn off shield)
        homeBaseDistance = 5 --export Distance from home base to turn off shield (km)
        boosterSpeedThreshold = 55000 --export km/h
        AP_Brake_Buffer = 5000 --export
        AP_Max_Rotation_Factor = 10 --export
        AR_Mode = 'NONE' --export
        AR_Exclude_Moons = true --export
        initialResistWait = 15
        dampening = true --inertial dampening
        route_speed = 20000 --export max speed to fly routes
        font_size_ratio = 1.0 --export Font size scaling
        if font_size_ratio == 0 then font_size_ratio = 0.1 end
        debug = false --export collect and print debug data
        
        -- HP (Shield/CCS) widget --
        shieldProfile = 'auto'
        resistProfiles = {}
        resistProfiles['auto'] = {['am']=0, ['em']=0, ['kn']=0, ['th']=0}
        resistProfiles['cannon'] = {['am']=0, ['em']=0, ['kn']=0.5, ['th']=0.5}
        resistProfiles['railgun'] = {['am']=0.5, ['em']=0.5, ['kn']=0, ['th']=0}
        resistProfiles['missile'] = {['am']=0.5, ['em']=0, ['kn']=0.5, ['th']=0}
        resistProfiles['laser'] = {['am']=0, ['em']=0.5, ['kn']=0, ['th']=0.5}
        resistProfiles['am'] = {['am']=1, ['em']=0, ['kn']=0, ['th']=0}
        resistProfiles['em'] = {['am']=0, ['em']=1, ['kn']=0, ['th']=0}
        resistProfiles['kn'] = {['am']=0, ['em']=0, ['kn']=1, ['th']=0}
        resistProfiles['th'] = {['am']=0, ['em']=0, ['kn']=0, ['th']=1}
        
        -- Element Damage Groups --
        DamageGroupMap = {}
        DamageGroupMap['Engine'] = {}
        DamageGroupMap['Engine']['Total'] = 0
        DamageGroupMap['Engine']['Current'] = 0
        
        DamageGroupMap['Control'] = {}
        DamageGroupMap['Control']['Total'] = 0
        DamageGroupMap['Control']['Current'] = 0
        
        DamageGroupMap['Weapons'] = {}
        DamageGroupMap['Weapons']['Total'] = 0
        DamageGroupMap['Weapons']['Current'] = 0
        
        DamageGroupMap['Misc'] = {}
        DamageGroupMap['Misc']['Total'] = 0
        DamageGroupMap['Misc']['Current'] = 0
        
        brokenElements = {}
        brokenElements['Engine'] = {}
        brokenElements['Control'] = {}
        brokenElements['Weapons'] = {}
        
        brokenDisplay = {}
        brokenDisplay['Engine'] = ''
        brokenDisplay['Control'] = ''
        brokenDisplay['Weapons'] = ''
        
        fontColor = 'Red;'
        
        -- WayPoint File Info
        validWaypointFiles = {}
        ------------------------------------
        boosterOn = false
        boosterPulseOn = false
        boosterCount = 0
        
        
        userCode = {}
        userCode[validPilotCode] = pilotName
        if db_1 ~= nil and useDB then
            globalDB('get')
        end
        
        if db_1 ~= nil then
            for _,key in pairs(db_1.getKeyList()) do
                if db_1.getStringValue(key) ~= nil and db_1.getStringValue(key) ~= '' and string.starts(key,'uc-') then 
                    userCode[string.sub(key,4)] = db_1.getStringValue(key)
                end
            end
        end
        
        -----------------
        
        -- Transponder --
        showCode = false
        codeTimer = 5
        codeCount = 0
        codeSeed = nil
        tags = {}
        transponderStatus = false
        tCode = nil
        cOverlap = false
        cOverlapTick = 0
        codeSeed = nil
        rollTimer = 120 --Roll code timer in seconds
        if pcall(require,'autoconf/custom/transponder') then 
            codeSeed = tonumber(require('autoconf/custom/transponder'))
        end
        unit.setTimer('code',0.25)
        -----------------
        
        ---- Initialization ---
        ticker = 0
        arkTime = system.getArkTime()
        dpsChart = {}
        CCSPercent = 0
        ccsHTML = ''
        shieldPercent = 0
        shieldHTML = ''
        shieldWarningHTML = ''
        ventHTML = ''
        shield_resist_cd = 0
        amS = 0
        emS = 0
        knS = 0
        thS = 0
        amR = 0
        emR = 0
        knR = 0
        thR = 0
        constructPosition = vec3(construct.getWorldPosition())
        constructForward = vec3(construct.getWorldOrientationForward())
        constructVelocity = vec3(construct.getWorldVelocity())
        speed = 0
        apHTML = ''
        apStatus = 'inactive'
        apBG = ''
        SZDStr = ''
        cName = construct.getName()
        cID = construct.getId()
        cr = nil
        cr_ar = nil
        hoverLocked = false
        
        -- Orbit globals
        orbit_active = false
        orbit_center = vec3(0,0,0)
        orbit_radius = 0
        orbit_agl = 0    -- meters above ground
        
        -- Optional: Height hold PID (simple P for now; expand if oscillation occurs)
        height_kp = 0.05  -- Proportional: Tune for response (e.g., 0.01-0.1)
        height_ki = 0.01  -- Integral: Tune for steady-state (e.g., 0.005-0.02)
        height_kd = 0.1   -- Derivative: Tune for damping (e.g., 0.05-0.2)
        height_integral = 0
        height_last_error = 0
        height_i_max = 100  -- Anti-windup limit (adjust based on error units in meters)
        radius_kp = 0.5  -- Tune: for radial correction
        roll_kp = 0.1  -- New: For roll correction
        -------
        
        dockedMass = 0
        maxThrustTags = 'thrust'
        FPS = 0
        FPS_COUNTER = 0
        FPS_INTERVAL = arkTime
        
        AR_Custom_Points = {}
        AR_Custom = false
        AR_Temp = false
        AR_Temp_Points = {}
        AR_Array = {}
        dpsHTML = ''
        fuelHTML = ''
        shipNameHTML = shipNameWidget()
        systemCheckHTML = ''
        
        profiling_data = {}
        fps_data = {}
        fps_data['min'] = 999
        fps_data['max'] = 0
        fps_data['count'] = 0
        fps_data['sum'] = 0
        dataUpdateCounter = 0
        
        
        legacyFile = false
        if pcall(require,'autoconf/custom/DeadRemote_CustomFileIndex') then
            customFiles = require('autoconf/custom/DeadRemote_CustomFileIndex')
            if type(customFiles) == "table" then
                for waypointFileId,waypointFile in ipairs(customFiles) do
                    system.print('Found waypointFileId: '..waypointFileId..' displayName='..waypointFile.DisplayName..' waypointFilePath='..waypointFile.FilePath)
                    if pcall(require,waypointFile.FilePath) then
                        waypoints = require(waypointFile.FilePath)
                        if type(waypoints) == "table" then
                            table.insert(validWaypointFiles,waypointFile)
                            AR_Array[#validWaypointFiles] = {}
                            system.print('Adding waypoints from '..waypointFile.FilePath)
                            for name,pos in pairs(waypoints) do
                                AR_Custom_Points[name] = pos
                                AR_Array[#validWaypointFiles][name]=pos
                                AR_Custom = true
                            end
                        else
                            system.print('Failed to load waypoints from '..waypointFile.FilePath)
                        end
                    else
                        system.print('Failed to load waypoints from '..waypointFile.FilePath)
                    end
                end
            end
        else
            legacyFile = true
            if pcall(require,'autoconf/custom/AR_Waypoints') then 
                waypoints = require('autoconf/custom/AR_Waypoints') 
                for name,pos in pairs(waypoints) do
                    AR_Custom_Points[name] = pos
                    AR_Custom = true
                end
            end
        end
        
        -- Import routes file --
        routes = {}
        route = nil
        route_pos = nil
        if db_1 then
            db_1.setIntValue('record',0)
        end
        if pcall(require,'autoconf/custom/routes') then
            routes = require('autoconf/custom/routes')
        end
        
        screenHeight = system.getScreenHeight()
        screenWidth = system.getScreenWidth()
        maxFuel = 0
        maxAtmoFuel = 0
        sFuelPercent = 0
        aFuelPercent = 0
        maxBrake = 0
        maxAtmoSpeed = construct.getFrictionBurnSpeed()*3.6
        inAtmo = unit.getAtmosphereDensity() > 0
        atmoSpeedLimit = true
        cAltitude = core.getAltitude()
        for i,v in pairs(spacefueltank) do maxFuel = maxFuel + v.getMaxVolume() end
        for i,v in pairs(atmofueltank) do maxAtmoFuel = maxAtmoFuel + v.getMaxVolume() end
        currentSystem = Atlas[0]
        planets = {}
        constructPosition = vec3(construct.getWorldPosition())
        warp_beacons = {}
        if pcall(require,'autoconf/custom/beacons') then 
            beacons = require('autoconf/custom/beacons') 
            for name,pos in pairs(beacons) do
                warp_beacons[name] = convertWaypoint(pos)
            end
        end
        for k,v in pairs(currentSystem) do 
            warp_beacons[currentSystem[k]['name'][1]] = vec3(currentSystem[k]['center']) 
            planets[currentSystem[k]['name'][1]] = vec3(currentSystem[k]['center']) 
        end
        pipes = {}
        SZ = vec3(13771471, 7435803, -128971)
        inSZ = true
        enabledEngineTags = {}
        enabledEngineTagsStr = ''
        closestPipeStr = ''
        closestPlanetStr = ''
        milEng = false
        if shield_1 then
            srp = shield_1.getResistancesPool()
            csr = shield_1.getResistances()
            rcd = shield_1.getResistancesCooldown()
            rem = shield_1.getResistancesRemaining()
            srr = shield_1.getStressRatioRaw()
            maxCD = shield_1.getResistancesMaxCooldown()
            venting = shield_1.isVenting()
            shp = shield_1.getShieldHitpoints()
            maxSHP = shield_1.getMaxShieldHitpoints()
            ventCD = shield_1.getVentingCooldown()
        else
            srp = {}
            csr = {}
            rcd = 0
            rem = 0
            srr = {}
            maxCD = 0
            venting = 0
            shp = 0
            maxSHP = 0
            ventCD = 0
        end
        coreHP = 0
        ------------------------------------
        
        -- Shield Initialize --
        dmgTick = 0
        homeBaseVec = vec3()
        if homeBaseLocation ~= '' then
            homeBaseVec = vec3(convertWaypoint(homeBaseLocation))
        end
        --------
        
        pitchInput = 0
        rollInput = 0
        yawInput = 0
        brakeInput = 0
        spaceBar = false
        
        Nav = Navigator.new(system, core, unit)
        Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000, 40000, 50000})
        Nav.axisCommandManager:setTargetGroundAltitude(0)
        
        
        -- element widgets
        unit.hideWidget()
        core.hideWidget()
        
        placeRadar = true
        _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, "Rocket Fuel", "fuel_container")
        if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
            _autoconf.displayCategoryPanel(radar, radar_size, "Radar", "radar")
            placeRadar = false
        end
        if antigrav ~= nil then antigrav.showWidget() end
        if warpdrive ~= nil then warpdrive.showWidget() end
        if gyro ~= nil then gyro.showWidget() end
        
        -- freeze the player in he is remote controlling the construct
        seated = player.isSeated()
        if seated then
            player.freeze(1)
        end
        
        system.showHelper(0)
        
        -- landing gear
        -- make sure every gears are synchonized with the first
        gearExtended = (Nav.control.isAnyLandingGearDeployed()) -- make sure it is a lua boolean
        if gearExtended then
            Nav.control.deployLandingGears()
        else
            Nav.control.retractLandingGears()
        end
        
        if vec3(construct.getWorldVelocity()):len() * 3.6 < 500 then
            brakeInput = brakeInput + 1
        end
        
        lShift = false
        lAlt = false
        
        -- Validate pilot mode --
        if validatePilot then
            local validPilot = false
            for k,v in pairs(userCode) do 
                if k == tostring(player.getId()) then 
                    validPilot = true 
                    system.print(string.format('-- Welcome %s --',pilotName)) 
                    break
                end
            end
            if not validPilot then
                system.print(player.getId())
                unit.exit()
            end
        end
        ----------------------------
        
        showScreen = true
        fuelWarningText = ''
        warnings = {}
        warningSymbols = {}
        warningSymbols['svgCritical'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 414.205 414.205" style="enable-background:new 0 0 414.205 414.205;">
                            <g>
                                <g>
                                    <polygon points="188.077,129.985 188.077,129.99 165.759,226.671 216.626,207.046 204.891,257.867 194.589,257.867 
                                        206.99,293.641 235.908,257.867 225.606,257.867 244.561,175.773 193.693,195.398 208.797,129.985 		"/>
                                    <path d="M39.11,207.103l167.992,167.992L375.09,207.103L207.103,39.116L39.11,207.103z M207.103,351.103l-143.995-144
                                        L207.103,63.108l143.99,143.995L207.103,351.103z"/>
                                    <path d="M405.093,185.102L229.103,9.112c-12.15-12.15-31.846-12.15-43.996,0L9.112,185.102c-12.15,12.15-12.15,31.846,0,43.996
                                        l175.99,175.995c12.15,12.15,31.846,12.15,43.996,0l175.995-175.99C417.243,216.954,417.243,197.252,405.093,185.102z
                                        M393.092,217.097l-175.985,176c-2.673,2.668-6.226,4.137-10.004,4.137s-7.327-1.469-9.999-4.137L21.108,217.102
                                        c-5.514-5.514-5.514-14.484,0-19.999L197.103,21.108c2.673-2.667,6.221-4.137,9.999-4.137s7.332,1.469,10.004,4.142l175.99,175.99
                                        c2.673,2.673,4.142,6.226,4.142,9.999S395.764,214.429,393.092,217.097z"/>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgWarning'] = [[
                        <svg x="0px" y="0px"
                            viewBox="0 0 192.146 192.146" style="enable-background:new 0 0 192.146 192.146;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M108.186,144.372c0,7.054-4.729,12.32-12.037,12.32h-0.254c-7.054,0-11.92-5.266-11.92-12.32
                                            c0-7.298,5.012-12.31,12.174-12.31C103.311,132.062,108.059,137.054,108.186,144.372z M88.44,125.301h15.447l2.951-61.298H85.46
                                            L88.44,125.301z M190.372,177.034c-2.237,3.664-6.214,5.921-10.493,5.921H12.282c-4.426,0-8.51-2.384-10.698-6.233
                                            c-2.159-3.849-2.11-8.549,0.147-12.349l84.111-149.22c2.208-3.722,6.204-5.96,10.522-5.96h0.332
                                            c4.445,0.107,8.441,2.618,10.513,6.546l83.515,149.229C192.717,168.768,192.629,173.331,190.372,177.034z M179.879,170.634
                                            L96.354,21.454L12.292,170.634H179.879z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgTarget'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 330 330" style="enable-background:new 0 0 330 330;">
                            <g id="XMLID_813_">
                                <path id="XMLID_814_" d="M15,130c8.284,0,15-6.716,15-15V30h85c8.284,0,15-6.716,15-15s-6.716-15-15-15H15C6.716,0,0,6.716,0,15
                                    v100C0,123.284,6.716,130,15,130z"/>
                                <path id="XMLID_815_" d="M15,330h100c8.284,0,15-6.716,15-15s-6.716-15-15-15H30v-85c0-8.284-6.716-15-15-15s-15,6.716-15,15v100
                                    C0,323.284,6.716,330,15,330z"/>
                                <path id="XMLID_816_" d="M315,200c-8.284,0-15,6.716-15,15v85h-85c-8.284,0-15,6.716-15,15s6.716,15,15,15h100
                                    c8.284,0,15-6.716,15-15V215C330,206.716,323.284,200,315,200z"/>
                                <path id="XMLID_817_" d="M215,30h85v85c0,8.284,6.716,15,15,15s15-6.716,15-15V15c0-8.284-6.716-15-15-15H215
                                    c-8.284,0-15,6.716-15,15S206.716,30,215,30z"/>
                                <path id="XMLID_818_" d="M75,165c0,8.284,6.716,15,15,15h60v60c0,8.284,6.716,15,15,15s15-6.716,15-15v-60h60
                                    c8.284,0,15-6.716,15-15s-6.716-15-15-15h-60V90c0-8.284-6.716-15-15-15s-15,6.716-15,15v60H90C81.716,150,75,156.716,75,165z"/>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgGroup'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 487.3 487.3" style="enable-background:new 0 0 487.3 487.3;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M362.1,326.05c-32.6-26.8-67.7-44.5-74.9-48c-0.8-0.4-1.3-1.2-1.3-2.1v-50.7c6.4-4.3,10.6-11.5,10.6-19.7v-52.6
                                            c0-26.2-21.2-47.4-47.4-47.4h-5.6h-5.7c-26.2,0-47.4,21.2-47.4,47.4v52.6c0,8.2,4.2,15.5,10.6,19.7v50.7c0,0.9-0.5,1.7-1.3,2.1
                                            c-7.2,3.5-42.3,21.3-74.9,48c-5.9,4.8-9.3,12.1-9.3,19.7v36h128h127.9v-36C371.4,338.15,368,330.85,362.1,326.05z"/>
                                    </g>
                                    <g>
                                        <path d="M479.2,290.55c-27.3-22.5-56.8-37.4-62.8-40.3c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1
                                            c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.7c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8
                                            c-3.7,1.8-16.5,8.2-32.1,18.2c15.6,8.6,40.3,23.4,63.6,42.6c8.2,6.7,13.6,16,15.6,26.2h97v-30.2
                                            C487,300.65,484.2,294.55,479.2,290.55z"/>
                                    </g>
                                    <g>
                                        <path d="M144,250.25c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.9
                                            c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8c-6,2.9-35.5,17.8-62.8,40.3
                                            c-4.9,4.1-7.8,10.1-7.8,16.5v30.2h97c1.9-10.2,7.4-19.5,15.6-26.2c23.3-19.2,48-34,63.6-42.6
                                            C160.5,258.45,147.7,252.05,144,250.25z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgBrakes'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 234.409 234.409" style="enable-background:new 0 0 234.409 234.409;">
                            <g>
                                <path d="M117.204,30.677c-47.711,0-86.527,38.816-86.527,86.528c0,47.711,38.816,86.526,86.527,86.526s86.527-38.815,86.527-86.526
                                    C203.732,69.494,164.915,30.677,117.204,30.677z M117.204,188.732c-39.44,0-71.527-32.086-71.527-71.526
                                    c0-39.441,32.087-71.528,71.527-71.528s71.527,32.087,71.527,71.528C188.732,156.645,156.645,188.732,117.204,188.732z"/>
                                <path d="M44.896,44.897c2.929-2.929,2.929-7.678,0-10.607c-2.93-2.929-7.678-2.929-10.607,0
                                    c-45.718,45.719-45.718,120.111,0,165.831c1.465,1.465,3.384,2.197,5.304,2.197c1.919,0,3.839-0.732,5.303-2.197
                                    c2.93-2.929,2.93-7.677,0.001-10.606C5.026,149.643,5.026,84.768,44.896,44.897z"/>
                                <path d="M200.119,34.29c-2.93-2.929-7.678-2.929-10.607,0c-2.929,2.929-2.929,7.678,0,10.607
                                    c39.872,39.871,39.872,104.746,0,144.618c-2.929,2.929-2.929,7.678,0,10.606c1.465,1.464,3.385,2.197,5.304,2.197
                                    c1.919,0,3.839-0.732,5.304-2.197C245.839,154.4,245.839,80.009,200.119,34.29z"/>
                                <path d="M117.204,140.207c4.143,0,7.5-3.358,7.5-7.5v-63.88c0-4.142-3.357-7.5-7.5-7.5c-4.143,0-7.5,3.358-7.5,7.5v63.88
                                    C109.704,136.849,113.062,140.207,117.204,140.207z"/>
                                <circle cx="117.204" cy="156.254" r="9.329"/>
                            </g>
                        </svg>
                    ]]
        unit.setTimer('screen',screenRefreshRate)
        system.showScreen(1)
    onStop:
      lua: |
        _autoconf.hideCategoryPanels()
        db_1.setIntValue('record',0)
        if antigrav ~= nil then antigrav.hideWidget() end
        if warpdrive ~= nil then warpdrive.hideWidget() end
        if gyro ~= nil then gyro.hideWidget() end
        core.hideWidget()
        Nav.control.switchOffHeadlights()
        globalDB('save')
        
        
        if debug then
            system.print('-- Profiling Data --')
            for k,v in pairs(profiling_data) do
                if v >= .0001 then
                    system.print(string.format([[Function %s took %.4f sec to run]],k,v))
                end
            end
            system.print('FPS Data: ')
            system.print(string.format('  FPS Min: %.2f',fps_data['min']))
            system.print(string.format('  FPS Max: %.2f',fps_data['max']))
            system.print(string.format('  FPS Avg: %.2f',fps_data['avg']))
            system.print('-- End Profiling Data --')
        end
    onTimer:
      args: ['screen']
      lua: |
          profile(runTimerScreen,'runTimerScreen')
  system:
    onStart:
      lua: |
        json = require("dkjson")
        Atlas = require('atlas')
        
        function getPitch(gravityDirection, forward, right)
            local horizontalForward = gravityDirection:cross(right):normalize_inplace()
            local pitch = math.acos(utils.clamp(horizontalForward:dot(-forward), -1, 1)) * constants.rad2deg
          
            if horizontalForward:cross(-forward):dot(right) < 0 then
              pitch = -pitch
            end -- Cross right dot forward?
            return pitch
        end
        
        function profile(func, name, ...)
            local start_time = system.getArkTime()
            local result = {func(...)}
            local end_time = system.getArkTime()
            if debug then
                if profiling_data[name] == nil or profiling_data[name] < end_time - start_time then
                    profiling_data[name] = end_time - start_time
                end
            end
            return table.unpack(result)
        end
        
        function commas(number)
            return tostring(number) -- Make sure the "number" is a string
               :reverse() -- Reverse the string
               :gsub('%d%d%d', '%0,') -- insert one comma after every 3 numbers
               :gsub(',$', '') -- Remove a trailing comma if present
               :reverse() -- Reverse the string again
               :sub(1) -- a little hack to get rid of the second return value
        end
        
        function convertWaypoint(wp)
            local clamp  = utils.clamp
            local deg2rad    = math.pi/180
            local rad2deg    = 180/math.pi
            local epsilon    = 1e-10
        
            local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
            local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' .. num ..  ',' .. num .. '}'
            local systemId = wp 
        
            systemId, bodyId, latitude, longitude, altitude = string.match(wp, posPattern)
            assert(systemId, 'Position string is malformed.')
        
            systemId  = tonumber(systemId)
            bodyId    = tonumber(bodyId)
            latitude  = tonumber(latitude)
            longitude = tonumber(longitude)
            altitude  = tonumber(altitude)
        
            if bodyId == 0 then -- this is a hack to represent points in space
            mapPosition =  setmetatable({latitude  = latitude,
                                        longitude = longitude,
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            else
            mapPosition = setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                        longitude = deg2rad*(longitude % 360),
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            end
            if mapPosition.bodyId == 0 then
                return vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)
            end
        
            local center = {
                x=Atlas[systemId][bodyId].center[1],
                y=Atlas[systemId][bodyId].center[2],
                z=Atlas[systemId][bodyId].center[3]
            }
        
            local xproj = math.cos(mapPosition.latitude)
            return center + (Atlas[systemId][bodyId].radius + mapPosition.altitude) *
                vec3(xproj*math.cos(mapPosition.longitude),
                    xproj*math.sin(mapPosition.longitude),
                    math.sin(mapPosition.latitude))
        end
        
        function string.starts(String,Start)
            return string.sub(String,1,string.len(Start))==Start
        end
        
        function contains(tablelist, val)
            for i=1,#tablelist do
                if tablelist[i] == val then 
                    return true
                end
            end
            return false
        end
        
        function formatNumber(val, numType)
            if numType == 'speed' then
                local speedString = ''
                if type(val) == 'number' then speedString = string.format('%.0fkm/h',val)
                else speedString = string.format('%skm/h',val)
                end
                return speedString
            elseif numType == 'distance' then
                local distString = ''
                if type(val) == 'number' then
                    if val < 1000 then distString = string.format('%.2fm',val)
                    elseif val < 100000 then distString = string.format('%.2fkm',val/1000)
                    else distString = string.format('%.2fsu',val*.000005)
                    end
                else
                    distString = string.format('%sm',val)
                end
                return distString
            elseif numType == 'mass' then
                local massStr = ''
                if type(val) == 'number' then
                    if val < 1000 then massStr = string.format('%.2fkg',val)
                    elseif val < 1000000 then massStr = string.format('%.2ft',val/1000)
                    else massStr = string.format('%.2fkt',val/1000000)
                    end
                else
                    massStr = string.format('%skg',val)
                end
                return massStr
            end
        end
        
        function brakeWidget()
            local brakeON = brakeInput > 0
            local bw = ''
            if brakeON then
                warnings['brakes'] = 'svgBrakes'
            else
                warnings['brakes'] = nil
            end
            return bw
        end
        
        function flightWidget()
            local maxSpeedString = formatNumber(maxSpeed,'speed')
            if cAltitude ~= 0 or inAtmo then 
                maxSpeedString = formatNumber(maxAtmoSpeed,'speed') 
            end
            local sw = string.format([[
                    <path class="widget" d="
                    M 595.2 1.08
                    L  1324.8 1.08
                    L 1171.2 59.4
                    L 748.8 59.4
                    L 595.2 1.08"
                    stroke="%s" stroke-width="2" fill="%s" />
                    <path class="widget" d="
                    M 1273.92 30.24
                    L 1326.72 41.796
                    L 1536 1.08
                    L 1324.8 1.08
                    L 1273.92 19.98
                    L 1273.92 30.24"
                    stroke="%s" stroke-width="1" fill="%s" />
                    <path class="widget" d="
                    M 960 1.08
                    L 960 69.66"
                    stroke="%s" stroke-width="1" fill="none" />
        
                    <path class="widget" d="
                    M 1171.2 1.08
                    L 1171.2 69.66"
                    stroke="%s" stroke-width="1" fill="none" />
        
                    <path class="widget" d="
                    M 748.8 1.08 
                    L 748.8 69.66"
                    stroke="%s" stroke-width="1" fill="none" />
        
                    <text class="text" x="768" y="16.2" style="fill: %s" font-size="%svh" font-weight="bold">Speed: %s</text>
                    <text class="text" x="768" y="35.1" style="fill: %s" font-size="%svh" font-weight="bold">Current Accel: %.2f G</text>
                    <text class="text" x="768" y="54" style="fill: %s" font-size="%svh" font-weight="bold">Brake Dist: %s</text>
                    
                    <text class="text" x="963.84" y="16.2" style="fill: %s" font-size="%svh" font-weight="bold">Max Speed: %s</text>
                    <text class="text" x="963.84" y="35.1" style="fill: %s" font-size="%svh" font-weight="bold">Max Accel: %.2f G</text>
                    <text class="text" x="963.84" y="54" style="fill: %s" font-size="%svh" font-weight="bold">Max Brake: %.2f G</text>
        
                    <text class="text" x="1313.28" y="30.24" style="fill: %s" font-size="%svh" font-weight="bold" transform="rotate(-10,1313.28,30.24)">%s</text>
        
                    ]],lineColor,bgColor,lineColor,modeBG,lineColor,lineColor,lineColor,
                    fontColor,font_size_ratio+0.42,formatNumber(speed,'speed'),
                    fontColor,font_size_ratio+0.42,accel/9.81,
                    fontColor,font_size_ratio+0.42,formatNumber(brakeDist,'distance'),
                    fontColor,font_size_ratio+0.42,maxSpeedString,
                    fontColor,font_size_ratio+0.42,maxSpaceThrust/mass/9.81,
                    fontColor,font_size_ratio+0.42,maxBrake/mass/9.81,
                    fontColor,font_size_ratio+0.42,mode)
        
                    sw = sw.. [[
                        <text x="]].. tostring(.37 * screenWidth) ..[[" y="]].. tostring(.015 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Mass </text>
                        <text x="]].. tostring(.355 * screenWidth) ..[[" y="]].. tostring(.028 * screenHeight) ..[[" style="fill: ]]..fontColor..[[" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">]]..formatNumber(mass,'mass')..[[</text>
                    ]]
            return sw
        end
        
        function fuelWidget()
            curFuel = 0
            curAtmoFuel = 0
            local fuelWarning = false
            local fuelTankWarning = false
            for i,v in pairs(spacefueltank) do 
                curFuel = curFuel + v.getItemsVolume()
                if v.getItemsVolume()/v.getMaxVolume() < .2 then fuelTankWarning = true end
            end
        
            for i,v in pairs(atmofueltank) do 
                curAtmoFuel = curAtmoFuel + v.getItemsVolume()
                if v.getItemsVolume()/v.getMaxVolume() < .2 then fuelTankWarning = true end
            end
        
            sFuelPercent = curFuel/maxFuel * 100
            if sFuelPercent < 20 then fuelWarning = true end
            curFuelStr = string.format('%.2f%%',sFuelPercent)
        
            aFuelPercent = curAtmoFuel/maxAtmoFuel * 100
            if aFuelPercent < 20 then fuelWarning = true end
            curAtmoFuelStr = string.format('%.2f%%',aFuelPercent)
        
            --Center bottom ribbon
            local fw = string.format([[
        
                <linearGradient id="spaceFuel" x1="0%%" y1="0%%" x2="100%%" y2="0%%">
                    <stop offset="%s" style="stop-color:rgba(99, 250, 79, 0.95);stop-opacity:.95" />
                    <stop offset="%s" style="stop-color:rgba(255, 10, 10, 0.5);stop-opacity:.5" />
                </linearGradient>
        
                <linearGradient id="atmoFuel" x1="0%%" y1="0%%" x2="100%%" y2="0%%">
                    <stop offset="%s" style="stop-color:rgba(47, 154, 255, 0.95);stop-opacity:.95" />
                    <stop offset="%s" style="stop-color:rgba(255, 10, 10, 0.5);stop-opacity:.5" />
                </linearGradient>
        
                <path d="
                M 645.12 19.98 
                L 748.8 59.4
                L 1171.2 59.4
                L 1273.92 19.98
                L 1273.92 30.24
                L 1171.2 69.66
                L 748.8 69.66
                L 646.08 30.24
                L 645.12 19.98"
            stroke="%s" stroke-width="2" fill="%s" />
        
            <path d="
                M 748.8 59.4
                L 1171.2 59.4
                L 1171.2 69.66
                L 748.8 69.66
                L 748.8 59.4"
            stroke-width="1" fill="url(#spaceFuel)" />
        
            <path d="
                M 960 59.4 
                L 960 75.6"
            stroke="black" stroke-width="1.5" fill="none" />
        
            <path d="
                M 1065.6 59.4 
                L 1065.6 75.6"
            stroke="black" stroke-width="1.5" fill="none" />
        
            <path d="
                M 854.4 59.4 
                L 854.4 75.6"
            stroke="black" stroke-width="1.5" fill="none" />
            ]],curFuelStr,curFuelStr,curAtmoFuelStr,curAtmoFuelStr,lineColor,bgColor,lineColor)
        
            if maxAtmoFuel > 0 then
                fw = fw .. string.format([[
        
                    <path d="
                    M 645.12 19.98 
                    L 748.8 59.4
                    L 1171.2 59.4
                    L 1273.92 19.98
                    L 1273.92 30.24
                    L 1171.2 69.66
                    L 748.8 69.66
                    L 646.08 30.24
                    L 645.12 19.98"
                stroke="%s" stroke-width="2" fill="%s" />
        
                <path d="
                    M 748.8 75.6
                    L 1171.2 75.6
                    L 1171.2 85.86
                    L 748.8 85.86
                    L 748.8 75.6"
                stroke-width="1" fill="url(#atmoFuel)" />
        
                <path d="
                    M 960 75.6 
                    L 960 91.8"
                stroke="black" stroke-width="1.5" fill="none" />
        
                <path d="
                    M 1065.6 75.6 
                    L 1065.6 91.8"
                stroke="black" stroke-width="1.5" fill="none" />
        
                <path d="
                    M 854.4 75.6 
                    L 854.4 91.8"
                stroke="black" stroke-width="1.5" fill="none" />
        
                ]],lineColor,bgColor,lineColor)
            end
        
            if maxAtmoFuel > 0 then
                fw = fw .. string.format([[ 
                <text class="text" x="748.8" y="102.6" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Fuel: %s</text>
                <text class="text" x="850" y="102.6" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Atmo Fuel: %s</text>
                ]],curFuelStr,curAtmoFuelStr)
            else
                fw = fw .. string.format([[ 
                <text class="text" x="748.8" y="86.4" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Fuel: %s</text>
                ]],curFuelStr)
            end
        
            if fuelTankWarning or fuelWarning or showAlerts then
                fuelWarningText = 'Fuel level &lt; 20%'
                if not fuelWarning then fuelWarningText = 'A Fuel tank &lt; 20%%' end
                warnings['lowFuel'] = 'svgWarning'
            else
                warnings['lowFuel'] = nil
            end
        
            return fw
        end
        
        function apStatusWidget()
            local ap_type = 'Autopilot'
            if route and routes[route][route_pos] == autopilot_dest_pos then ap_type = 'Routepilot' end
            local apw = string.format([[
                <path class="widget" d="
                    M 646.08 30.24
                    L 593.28 41.796
                    L 384 1.08
                    L 595.2 1.08
                    L 646.08 19.98
                    L 646.08 30.24"
                    stroke="%s" stroke-width="1" fill="%s" />
                
                <text class="text" x="480" y="12.96" style="fill: %s" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold" transform="rotate(10,480,12.96)">%s: %s</text>
                %s
            ]],lineColor,apBG,fontColor,ap_type,apStatus,apHTML)
        
            return apw
        end
        
        function closestPlanet()
            local cName = nil
            local cDist = nil
            for pname,pvec in pairs(planets) do
                local tempDist = vec3(constructPosition-pvec):len()
                if cDist == nil or cDist > tempDist then
                    cDist = tempDist
                    cName = pname
                end
            end
            return cName,cDist
        end
        
        function pipeDist(A,B,loc,reachable)
            local AB = vec3.new(B['x']-A['x'],B['y']-A['y'],B['z']-A['z'])
            local BE = vec3.new(loc['x']-B['x'],loc['y']-B['y'],loc['z']-B['z'])
            local AE = vec3.new(loc['x']-A['x'],loc['y']-A['y'],loc['z']-A['z'])
        
            -- Is the point within warp distance and do we care?
            if AB:len() <= 500/0.000005 or not reachable then
                AB_BE = AB:dot(BE)
                AB_AE = AB:dot(AE)
        
                -- Is the point past the warp destination?
                -- If so, then the warp destination is closest
                if (AB_BE > 0) then
                    dist = BE:len()
                    distType = 'POINT'
        
                -- Is the point before the start point?
                -- If so, then the start point is the closest
                elseif (AB_AE < 0) then
                    dist = AE:len()
                    distType = 'POINT'
        
                -- If neither above condition was met, then the
                -- destination point must have be directly out from
                -- somewhere along the warp pipe. Lets calculate
                -- that distance
                else
                    dist = vec3(AE:cross(BE)):len()/vec3(AB):len()
                    distType = 'PIPE'
                end
                return dist,distType
            end
            return nil,nil
        end
        
        function closestPipe()
            pipes = {}
            local i = 0
            for name,center in pairs(planets) do
                if not string.starts(name,'Thades A') then
                    for name2,center2 in pairs(planets) do
                        if name ~= name2 and pipes[string.format('%s - %s',name2,name)] == nil and not string.starts(name,'Thades A') then
                            pipes[string.format('%s - %s',name,name2)] = {}
                            table.insert(pipes[string.format('%s - %s',name,name2)],center)
                            table.insert(pipes[string.format('%s - %s',name,name2)],center2)
                            if i % 100 == 0 then
                                coroutine.yield()
                            end
                            i = i + 1
                        end
                    end
                end
            end
        
            local cPipe = 'None'
            local cDist = 9999999999
            local cLoc = vec3(construct.getWorldPosition())
            i = 0
            for pName,vecs in pairs(pipes) do
                local tempDist,tempType = pipeDist(vecs[1],vecs[2],cLoc,false)
                if tempDist ~= nil then
                    if cDist > tempDist then
                        cDist = tempDist
                        cPipe = pName
                    end
                end
                if i % 200 == 0 then
                    coroutine.yield()
                end
                i = i + 1
            end
            closestPipeName = cPipe
            closestPipeDistance = cDist
            return cPipe,cDist
        end
        
        function positionInfoWidget()
            local piw = string.format([[
                    <path class="widget" d="
                        M 0 16.74
                        L 220.8 16.74
                        L 238.08 27
                        L 480 37.8
                        L 528 29.16
                        L 384 1.08
                        L 0 1.08
                        L 0 16.74"
                        stroke="%s" stroke-width="1" fill="%s"/>
                <path class="widget" d="
                    M 1980 16.74
                    L 1699.2 16.74
                    L 1681.92 27
                    L 1440 37.8
                    L 1392 29.16
                    L 1536 1.08
                    L 1920 1.08
                    L 1920 16.74"
                    stroke="%s" stroke-width="1" fill="%s" />
                <text class="text" x="1.92" y="14" style="fill: %s" font-size="]].. font_size_ratio ..[[vh">Remote Version: %s</text>
                <text class="text" x="1728" y="15" style="fill: %s" font-size="]].. font_size_ratio ..[[vh" font-weight="bold">Safe Zone Distance: %s</text>
                
                <text class="text" x="240" y="15" style="fill: %s" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Nearest Planet</text>
                <text class="text" x="288" y="26" style="fill: %s" font-size="]].. font_size_ratio ..[[vh" >%s</text>
        
                <text class="text" x="1574.4" y="15" style="fill: %s" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Nearest Pipe</text>
                <text class="text" x="1497.6" y="26" style="fill: %s" font-size="]].. font_size_ratio ..[[vh" >%s</text>
                ]],
                lineColor,bgColor,lineColor,bgColor,fontColor,hudVersion,fontColor,SZDStr,fontColor,fontColor,closestPlanetStr,fontColor,fontColor,closestPipeStr
            )
            return piw
        end
        
        function shipNameWidget()
            local snw = string.format([[
                    <text class="text" x="1728" y="35" font-size="]].. font_size_ratio+0.42 ..[[vh">Ship Name: %s</text>
                    <text class="text" x="1728" y="50" font-size="]].. font_size_ratio+0.42 ..[[vh">Ship Code: %s</text>
            ]],cName,cID)
            return snw
        end
        
        function arInfo(p,color,size,fill)
            local aInfo = library.getPointOnScreen({p['x'],p['y'],p['z']})
            if aInfo[3] ~= 0 then
                if aInfo[1] < .01 then aInfo[1] = .01 end
                if aInfo[2] < .01 then aInfo[2] = .01 end
                local translate = '(0,0)'
                if aInfo[1] < 1 and aInfo[2] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight*aInfo[2])
                elseif aInfo[1] > 1 and aInfo[1] < 3 and aInfo[2] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*aInfo[2])
                elseif aInfo[2] > 1 and aInfo[2] < 3 and aInfo[1] < 1 then
                    translate = string.format('(%.2f,%.2f)',screenWidth*aInfo[1],screenHeight)
                else
                    translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                end
                return string.format([[<g transform="translate%s">
                        <circle cx="0" cy="0" r="%spx" style="fill:%s;stroke:%s;stroke-width:1.5;opacity:0.5;" />
                        <line x1="%s" y1="%s" x2="-%s" y2="-%s" style="stroke:%s;stroke-width:.75;opacity:0.85;" />
                        <line x1="-%s" y1="%s" x2="%s" y2="-%s" style="stroke:%s;stroke-width:.75;opacity:0.85;" />
                        </g>]],translate,size,fill,color,size*1.4,size*1.4,size*1.4,size*1.4,color,size*1.4,size*1.4,size*1.4,size*1.4,color)
            else
                return ''
            end
        end
        
        function travelIndicatorWidget()
            local tiw = {}
            tiw[#tiw+1] = arInfo(constructPosition + 1.5/.000005 * constructForward,'rgba(200, 225, 235, 1)',5,'lightgrey')
            if offset_points then
                tiw[#tiw+1] = arInfo(constructPosition + 1.5/.000005 * constructRight,'rgba(200, 225, 235, 1)',5,'aqua')
                tiw[#tiw+1] = arInfo(constructPosition + -1.5/.000005 * constructRight,'rgba(200, 225, 235, 1)',5,'aqua')
                tiw[#tiw+1] = arInfo(constructPosition + -1.5/.000005 * constructForward,'rgba(200, 225, 235, 1)',5,'red')
                tiw[#tiw+1] = arInfo(constructPosition + -1/.000005 * (constructForward+constructRight),'rgba(200, 225, 235, 1)',5,'yellow')
                tiw[#tiw+1] = arInfo(constructPosition + -1/.000005 * (constructForward-constructRight),'rgba(200, 225, 235, 1)',5,'yellow')
                tiw[#tiw+1] = arInfo(constructPosition + 1/.000005 * (constructForward+constructRight),'rgba(200, 225, 235, 1)',5,'green')
                tiw[#tiw+1] = arInfo(constructPosition + 1/.000005 * (constructForward-constructRight),'rgba(200, 225, 235, 1)',5,'green')
            end
            
            if speed > 20 then
                tiw[#tiw+1] = arInfo(constructPosition + 2/.000005 * constructVelocity,'rgb(60, 255, 60)',7.5,'none')
                tiw[#tiw+1] = arInfo(constructPosition - 2/.000005 * constructVelocity,'rgb(255, 60, 60)',7.5,'none')
            end
            return table.concat(tiw,'')
        end
        
        function warningsWidget()
            local warningText = {}
            warningText['lowFuel'] = fuelWarningText
            warningText['brakes'] = 'Brakes Locked'
            warningText['venting'] = 'Shield Venting'
        
            local warningColor = {}
            warningColor['lowFuel'] = 'red'
            warningColor['cored'] = 'orange'
            warningColor['friendly'] = 'green'
            warningColor['venting'] = 'rgb(25, 247, 255)'
        
            if math.floor(arkTime*5) % 2 == 0 then
                warningColor['brakes'] = 'orange'
            else
                warningColor['brakes'] = 'yellow'
            end
        
            local ww = {}
            ww[#ww+1] = ''
            local count = 0
            for k,v in pairs(warnings) do
                if v ~= nil then
                    ww[#ww+1] = string.format([[
                        <svg class="widget" width="57.6" height="32.4" x="460.8" y="%s" style="fill: %s;" viewBox="0 0 1920 1080">
                            %s
                        </svg>
                        <text x="512.64" y="%s" style="fill: %s;" font-size="]].. font_size_ratio+0.7 ..[[vh" font-weight="bold">%s</text>
                        ]],tostring(.20 * screenHeight + .032 * screenHeight * count),warningColor[k],warningSymbols[v],tostring(.22 * screenHeight + .032 * screenHeight * count),warningColor[k],warningText[k])
                    count = count + 1
                end
            end
            return table.concat(ww,'')
        end
        
        function hpWidget()
            local hw = string.format([[
        
                    %s
                <svg x="633.6" y="950.4" viewBox="0 0 1920 1080">
                    <polyline class="widget" style="fill-opacity: 0; stroke-linejoin: round; stroke-linecap: round; stroke-width: 2px; stroke: lightgrey; fill: none;" points="2 78.902 250 78.902 276 50" bx:origin="0.564202 0.377551"/>
                    <polyline class="widget" style="stroke-width: 2px; stroke: lightgrey; fill: none;" points="225 85.853 253.049 85.853 271 67.902" bx:origin="-1.23913 -1.086291"/>
                    %s
                    <text style="fill: rgb(25, 247, 255); font-size: 11.8px; white-space: pre;" x="15" y="28.824" bx:origin="-2.698544 2.296589">Shield:</text>
                    <text style="fill: rgb(25, 247, 255); font-size: 11.8px; white-space: pre;" x="53.45" y="28.824" bx:origin="-2.698544 2.296589">%.2f%%</text>
                    <text style="fill: rgb(60, 255, 60); font-size: 11.8px; white-space: pre;" x="153" y="28.824" bx:origin="-2.698544 2.296589">CCS:</text>
                    <text style="fill: rgb(60, 255, 60); font-size: 11.8px; white-space: pre;" x="182.576" y="28.824" bx:origin="-2.698544 2.296589">%.2f%%</text>
                    %s
                    %s
                </svg>]],
                    shieldWarningHTML,ccsHTML,shieldPercent,CCSPercent,ventHTML,shieldHTML
                )
        
            return hw
        end
        
        function dpsWidget()
            local cDPS = 0
            local dmgTime = tonumber(string.format('%.0f',arkTime))
            for k,v in pairs(dpsChart) do
                if k < dmgTime - dmgAvgDuration then
                    dpsChart[k] = nil
                else
                    cDPS = cDPS + dpsChart[k]
                end
            end
            cDPS = cDPS/dmgAvgDuration
        
            local dw = string.format([[
                        <text x="1.92" y="99" style="fill: red;" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Damage: %.1fk</text>
                        <text x="1.92" y="120" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">AM: %.0f%% | %.0f%%</text>
                        <text x="2.08" y="135" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">EM: %.0f%% | %.0f%%</text>
                        <text x="2.32" y="150" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">KN: %.0f%% | %.0f%%</text>
                        <text x="2.48" y="165" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">TH: %.0f%% | %.0f%%</text>
                        <text x="2.48" y="180" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Resist cooldown: %.0f seconds</text>
            ]],cDPS/1000,100*amR,100*amS,100*emR,100*emS,100*knR,100*knS,100*thR,100*thS,shield_resist_cd)
            return dw
        end
        
        function generateScreen()
            local i = 0
            local htmlTable = {}
            htmlTable[i+1] = [[ <html>
                <style>
                    body {
                        font-family: 'Roboto', sans-serif;
                        color: #e6e6e6;
                        margin: 0;
                        overflow: hidden;
                    }
                    svg {
                        filter: drop-shadow(0px 0px 5px rgba(0, 255, 255, 0.5));
                    }
                    .widget {
                        stroke-width: 2;
                    }
                    .text {
                        fill: #e6e6e6;
                    }
                </style>
                    <body>
                    <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;" viewBox="0 0 1920 1080">]]
            i = i + 1
            htmlTable[i+1] = brakeWidget()
            i = i + 1
            
            if showScreen then 
                if showHelp then
                    htmlTable[i+1] = systemCheckHTML
                    i = i + 1
                end
                htmlTable[i+1] = profile(flightWidget,'flightWidget')
                i = i + 1
                htmlTable[i+1] = fuelHTML
                i = i + 1
                htmlTable[i+1] = profile(apStatusWidget,'apStatusWidget')
                i = i + 1
                htmlTable[i+1] = profile(positionInfoWidget,'positionInfoWidget')
                i = i + 1
                htmlTable[i+1] = shipNameHTML
                i = i + 1
                if shield_1 then 
                    htmlTable[i+1] = profile(hpWidget,'hpWidget')
                    i = i + 1
                end
                htmlTable[i+1] = dpsHTML
                i = i + 1
            end
            
            htmlTable[i+1] = profile(ARWidget,'ARWidget')
            i = i + 1
            htmlTable[i+1] = profile(travelIndicatorWidget,'travelIndicatorWidget')
            i = i + 1
            htmlTable[i+1] = profile(warningsWidget,'warningsWidget')
            i = i + 1
        
            htmlTable[i+1] = [[ </svg></body> </html> ]]
            system.setScreen(table.concat(htmlTable, ''))
        end
        
        function globalDB(action)
            if db_1 ~= nil then
                if action == 'get' then
                    if db_1.hasKey('generateAutoCode') then generateAutoCode = db_1.getIntValue('generateAutoCode') == 1 end
                    if db_1.hasKey('toggleBrakes') then toggleBrakes = db_1.getIntValue('toggleBrakes') == 1 end
                    if db_1.hasKey('validatePilot') then validatePilot = db_1.getIntValue('validatePilot') == 1 end
                    if db_1.hasKey('AP_Brake_Buffer') then AP_Brake_Buffer = db_1.getFloatValue('AP_Brake_Buffer') end
                    if db_1.hasKey('AP_Max_Rotation_Factor') then AP_Max_Rotation_Factor = db_1.getFloatValue('AP_Max_Rotation_Factor') end
                    if db_1.hasKey('AR_Mode') then AR_Mode = db_1.getStringValue('AR_Mode') end
                    if db_1.hasKey('AR_Exclude_Moons') then AR_Exclude_Moons = db_1.getIntValue('AR_Exclude_Moons') == 1 end
                    if db_1.hasKey('homeBaseLocation') then homeBaseLocation = db_1.getStringValue('homeBaseLocation') end
                    if db_1.hasKey('homeBaseDistance') then homeBaseDistance = db_1.getIntValue('homeBaseDistance') end
                    if db_1.hasKey('autoVent') then autoVent = db_1.getIntValue('autoVent') == 1 end
                    if db_1.hasKey('shieldProfile') then shieldProfile = db_1.getStringValue('shieldProfile') end
                    if db_1.hasKey('dampenerTorqueReduction') then dampenerTorqueReduction = db_1.getFloatValue('dampenerTorqueReduction') end
                    if db_1.hasKey('offset_points') then offset_points = db_1.getIntValue('offset_points') == 1 end
                    if db_1.hasKey('dmgAvgDuration') then dmgAvgDuration = db_1.getIntValue('dmgAvgDuration') end
                    if db_1.hasKey('font_size_ratio') then font_size_ratio = db_1.getFloatValue('font_size_ratio') end
                    if db_1.hasKey('atmoManualLimit') then atmoManualLimit = db_1.getFloatValue('atmoManualLimit') end
        
                elseif action == 'save' then
                    if generateAutoCode then db_1.setIntValue('generateAutoCode',1) else db_1.setIntValue('generateAutoCode',0) end
                    if validatePilot then db_1.setIntValue('validatePilot',1) else db_1.setIntValue('validatePilot',0) end
                    db_1.setFloatValue('AP_Brake_Buffer',AP_Brake_Buffer)
                    db_1.setFloatValue('AP_Max_Rotation_Factor',AP_Max_Rotation_Factor)
                    db_1.setStringValue('AR_Mode',AR_Mode)
                    if AR_Exclude_Moons then db_1.setIntValue('AR_Exclude_Moons',1) else db_1.setIntValue('AR_Exclude_Moons',0) end
                    if homeBaseLocation then db_1.setStringValue('homeBaseLocation',homeBaseLocation) end
                    db_1.setIntValue('homeBaseDistance',homeBaseDistance)
                    if autoVent then db_1.setIntValue('autoVent',1) else db_1.setIntValue('autoVent',0) end
                    db_1.setStringValue('shieldProfile',shieldProfile)
                    db_1.setFloatValue('dampenerTorqueReduction',dampenerTorqueReduction)
                    if offset_points then db_1.setIntValue('offset_points',1) else db_1.setIntValue('offset_points',0) end
                    db_1.setIntValue('dmgAvgDuration',dmgAvgDuration)
                    db_1.setFloatValue('font_size_ratio',font_size_ratio)
                    db_1.setFloatValue('atmoManualLimit',atmoManualLimit)
                end
            end
        end
        
        function ARWidget()
            -- Generate on screen planets for Augmented Reality view --
            AR_Generate = {}
            if autopilot_dest_pos ~= nil then AR_Generate['AutoPilot'] = convertWaypoint(autopilot_dest_pos) end
            if route and routes[route][route_pos] == autopilot_dest_pos then
                for k,v in pairs(routes[route]) do
                    AR_Generate[string.format('RP_%s',k)] = convertWaypoint(routes[route][k])
                end
            end
        
            --Correcting cases where the user was using the legacy FROM_FILE mode
            if AR_Mode == 'FROM_FILE' and not legacyFile then AR_Mode = "ALL" end
        
            if AR_Mode == 'ALL' then
                for k,v in pairs(AR_Custom_Points) do 
                    AR_Generate[k] = convertWaypoint(v)
                end
                for k,v in pairs(planets) do
                    AR_Generate[k] = v
                end
                for k,v in pairs(AR_Temp_Points) do 
                    AR_Generate[k] = convertWaypoint(v)
                end
            elseif string.find(AR_Mode,"FILE") ~= nil and not legacyFile then
                i, j = string.find(AR_Mode,"FILE")
                fileNumber = tonumber(string.sub(AR_Mode,j+1))
                if fileNumber > #validWaypointFiles then 
                    AR_Mode = "NONE"
                elseif not legacyFile then
                    for k,v in pairs(AR_Array[fileNumber]) do 
                        AR_Generate[k] = convertWaypoint(v)
                    end
                end
            elseif AR_Mode == 'FROM_FILE' then
                for k,v in pairs(AR_Custom_Points) do 
                    AR_Generate[k] = convertWaypoint(v)
                end
            elseif AR_Mode == 'TEMPORARY' then
                for k,v in pairs(AR_Temp_Points) do 
                    AR_Generate[k] = convertWaypoint(v)
                end
            elseif AR_Mode == 'PLANETS' then
                for k,v in pairs(planets) do
                    AR_Generate[k] = v
                end
            end
            local planetARTable = {}
            planetARTable[#planetARTable+1] = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            for name,pos in pairs(AR_Generate) do
                if not (name:find('Moon') or name:find('Haven') or name:find('Sanctuary') or name:find('Asteroid')) or vec3(pos - constructPosition):len()*0.000005 < 20 or not AR_Exclude_Moons then
                    local pDist = vec3(pos - constructPosition):len()
                    if pDist*0.000005 < 500  or planets[name] == nil then 
                        local pInfo = library.getPointOnScreen({pos['x'],pos['y'],pos['z']})
                        if pInfo[3] ~= 0 then
                            if pInfo[1] < .01 then pInfo[1] = .01 end
                            if pInfo[2] < .01 then pInfo[2] = .01 end
                            local fill = 'rgb(29, 63, 255)'
                            if planets[name] == nil  and name ~= 'AutoPilot' and not string.starts(name,'RP_') then fill = 'rgb(49, 182, 60)'
                            elseif name == 'AutoPilot' then fill = 'red'
                            elseif string.starts(name,'RP_') then fill = 'rgb(138, 43, 226)'
                            end
                            local translate = '(0,0)'
                            local depth = 15 * 1/( 0.02*pDist*0.000005)
                            local pDistStr = ''
                            if pDist < 1000 then pDistStr = string.format('%.2fm',pDist)
                            elseif pDist < 100000 then pDistStr = string.format('%.2fkm',pDist/1000)
                            else pDistStr = string.format('%.2fsu',pDist*0.000005)
                            end
                            if depth > 15 then depth = tostring(15) elseif depth < 1 then depth = '1' else depth = tostring(depth) end
                            if pInfo[1] < 1 and pInfo[2] < 1 then
                                translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight*pInfo[2])
                            elseif pInfo[1] > 1 and pInfo[1] < 3 and pInfo[2] < 1 then
                                translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight*pInfo[2])
                            elseif pInfo[2] > 1 and pInfo[2] < 3 and pInfo[1] < 1 then
                                translate = string.format('(%.2f,%.2f)',screenWidth*pInfo[1],screenHeight)
                            else
                                translate = string.format('(%.2f,%.2f)',screenWidth,screenHeight)
                            end
                            if name == 'AutoPilot' then
                                planetARTable[#planetARTable+1] = [[<g transform="translate]]..translate..[[">
                                        <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill:]]..fill..[[;stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <line x1="0" y1="0" x2="]].. depth*1.2 ..[[" y2="]].. depth*1.2 ..[[" style="stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <line x1="]].. depth*1.2 ..[[" y1="]].. depth*1.2 ..[[" x2="]]..tostring(depth*1.2 + 30)..[[" y2="]].. depth*1.2 ..[[" style="stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <text x="]]..tostring(depth*1.2)..[[" y="]].. depth*1.2+screenHeight*0.008 ..[[" style="fill: rgba(125, 150, 160, 1)" font-size="]]..tostring(.04*15)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                        </g>]]
                            elseif string.starts(name,'RP_') then
                                local tDepth = depth*.5
                                planetARTable[#planetARTable+1] = [[<g transform="translate]]..translate..[[">
                                        <circle cx="0" cy="0" r="]].. tDepth ..[[px" style="fill:]]..fill..[[;stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.75;" />
                                        <line x1="0" y1="0" x2="-]].. tDepth*1.2 ..[[" y2="-]].. tDepth*1.2 ..[[" style="stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <line x1="-]].. tDepth*1.2 ..[[" y1="-]].. tDepth*1.2 ..[[" x2="-]]..tostring(tDepth*1.2 + 30)..[[" y2="-]].. tDepth*1.2 ..[[" style="stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <text x="-]]..tostring(6*#name+tDepth*1.2)..[[" y="-]].. tDepth*1.2+screenHeight*0.0035 ..[[" style="fill: rgba(125, 150, 160, 1)" font-size="]]..tostring(.04*15)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                        </g>]]
                            else
                                planetARTable[#planetARTable+1] = [[<g transform="translate]]..translate..[[">
                                        <circle cx="0" cy="0" r="]].. depth ..[[px" style="fill:]]..fill..[[;stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <line x1="0" y1="0" x2="-]].. depth*1.2 ..[[" y2="-]].. depth*1.2 ..[[" style="stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <line x1="-]].. depth*1.2 ..[[" y1="-]].. depth*1.2 ..[[" x2="-]]..tostring(depth*1.2 + 30)..[[" y2="-]].. depth*1.2 ..[[" style="stroke:rgba(125, 150, 160, 1);stroke-width:1;opacity:0.5;" />
                                        <text x="-]]..tostring(6*#name+depth*1.2)..[[" y="-]].. depth*1.2+screenHeight*0.0035 ..[[" style="fill: rgba(125, 150, 160, 1)" font-size="]]..tostring(.04*15)..[[vw">]]..string.format('%s (%s)',name,pDistStr)..[[</text>
                                        </g>]]
                            end
                        end
                    end
                end
            end
            planetARTable[#planetARTable+1] = '</svg>'
            planetAR = table.concat(planetARTable, '')
            -- End planet updates --
        
            local arw = {}
            arw[#arw+1] = planetAR
            
            if legacyFile then
                arw[#arw+1] = string.format([[
                        <text x="1.92" y="32.4" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Augmented Reality Mode: %s</text>
                        <text x="1.92" y="68" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">FPS: %s</text>
                    ]],AR_Mode,FPS)
            else
                if string.find(AR_Mode,"FILE") ~= nil then
                    i, j = string.find(AR_Mode,"FILE")
                    fileNumber = tonumber(string.sub(AR_Mode,j+1))
                    --Catch if they reduced the number of custom files
                    if fileNumber > #validWaypointFiles then AR_Mode = "NONE" end
                    arw[#arw+1] = string.format([[
                            <text x="1.92" y="32.4" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Augmented Reality Mode: %s</text>
                            <text x="1.92" y="68" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">FPS: %s</text>
                        ]],validWaypointFiles[fileNumber].DisplayName,FPS)
                else
                    arw[#arw+1] = string.format([[
                        <text x="1.92" y="32.4" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">Augmented Reality Mode: %s</text>
                        <text x="1.92" y="68" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">FPS: %s</text>
                    ]],AR_Mode,FPS)
                end
            end
            return table.concat(arw,'')
        end
        
        function systemCheckWidget()
            local dw = {}
            local y_offset = 175
            local x_offset = 50
            local r_width = 300
            if brokenDisplay['Weapons'] ~= "" or brokenDisplay['Engine'] ~= "" or brokenDisplay['Control'] ~= "" then
                r_width = 800
            end
        
            dw[#dw+1] = string.format([[
                <rect width="%s" height="100" x="%s" y="%s" rx="5" ry="5" style="fill: rgba(25,25,25,0.65); stroke-width: 1.5; stroke: rgba(175,25,25,0.80);" />
            ]],r_width,x_offset-20,y_offset+175)
        
            dw[#dw+1] = string.format([[
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">Engines:</text>
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">%.1f%% (%.1fM)</text>
            ]],x_offset,197+y_offset,x_offset+120,197+y_offset,100*DamageGroupMap['Engine']['Current']/DamageGroupMap['Engine']['Total'],.000001*DamageGroupMap['Engine']['Current'])
            dw[#dw+1] = string.format([[
                <text x="%s" y="%s" style="fill: rgba(250, 150, 150, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" >%s</text>
            ]],x_offset+240,197+y_offset,string.sub(brokenDisplay['Engine'],1,-2))
        
        
            dw[#dw+1] = string.format([[
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">System Controls:</text>
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">%.1f%% (%.1fM)</text>
            ]],x_offset,217+y_offset,x_offset+120,217+y_offset,100*DamageGroupMap['Control']['Current']/DamageGroupMap['Control']['Total'],.000001*DamageGroupMap['Control']['Current'])
            dw[#dw+1] = string.format([[
                <text x="%s" y="%s" style="fill: rgba(250, 150, 150, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" >%s</text>
            ]],x_offset+240,217+y_offset,string.sub(brokenDisplay['Control'],1,-2))
        
            dw[#dw+1] = string.format([[
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">Weapons:</text>
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">%.1f%% (%.1fM)</text>
            ]],x_offset,237+y_offset,x_offset+120,237+y_offset,100*DamageGroupMap['Weapons']['Current']/DamageGroupMap['Weapons']['Total'],.000001*DamageGroupMap['Weapons']['Current'])
            dw[#dw+1] = string.format([[
                <text x="%s" y="%s" style="fill: rgba(250, 150, 150, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" >%s</text>
            ]],x_offset+240,237+y_offset,string.sub(brokenDisplay['Weapons'],1,-2))
        
            dw[#dw+1] = string.format([[
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">Other:</text>
                <text x="%s" y="%s" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.5 ..[[vh" font-weight="bold">%.1f%% (%.1fM)</text>
            ]],x_offset,257+y_offset,x_offset+120,257+y_offset,100*DamageGroupMap['Misc']['Current']/DamageGroupMap['Misc']['Total'],.000001*DamageGroupMap['Misc']['Current'])
            return table.concat(dw,'')
        end
        
        Kinematic = {} -- just a namespace
        local ITERATIONS = 100 -- iterations over engine "warm-up" period
        
        function Kinematic.computeAccelerationTime(initial, acceleration, final)
            -- ans: t = (vf - vi)/a
            return (final - initial)/acceleration
        end
        
        function Kinematic.computeDistanceAndTime(initial,final,mass,thrust,t50,brakeThrust)
        
            t50            = t50 or 0
            brakeThrust    = brakeThrust or 0 -- usually zero when accelerating
        
            local speedUp  = initial < final
            local a0       = thrust / (speedUp and mass or -mass)
            local b0       = -brakeThrust/mass
            local totA     = a0+b0
        
            if initial == final then
                return 0, 0   -- trivial
            elseif speedUp and totA <= 0 or not speedUp and totA >= 0 then
                return -1, -1 -- no solution
            end
        
            local distanceToMax, timeToMax = 0, 0
        
            if a0 ~= 0 and t50 > 0 then
        
                local c1  = math.pi/t50/2
        
                local v = function(t)
                    return a0*(t/2 - t50*math.sin(c1*t)/math.pi) + b0*t + initial
                end
        
                local speedchk = speedUp and function(s) return s >= final end or
                                                function(s) return s <= final end
                timeToMax  = 2*t50
        
                if speedchk(v(timeToMax)) then
                    local lasttime = 0
        
                    while math.abs(timeToMax - lasttime) > 0.25 do
                        local t = (timeToMax + lasttime)/2
                        if speedchk(v(t)) then
                            timeToMax = t 
                        else
                            lasttime = t
                        end
                    end
                end
        
                -- Closed form solution for distance exists (t <= 2*t50):
                local K       = 2*a0*t50^2/math.pi^2
                distanceToMax = K*(math.cos(c1*timeToMax) - 1) +
                                (a0+2*b0)*timeToMax^2/4 + initial*timeToMax
        
                if timeToMax < 2*t50 then
                    return distanceToMax, timeToMax
                end
                initial = v(timeToMax)
            end
            -- At full thrust, motion follows Newtons formula:
            local a = a0+b0
            local t = Kinematic.computeAccelerationTime(initial, a, final)
            local d = initial*t + a*t*t/2
            return distanceToMax+d, timeToMax+t
        end
        
        
        function isNumber(n)  return type(n)           == 'number' end
        function isSNumber(n) return type(tonumber(n)) == 'number' end
        function isTable(t)   return type(t)           == 'table'  end
        function isString(s)  return type(s)           == 'string' end
        function isVector(v)  return isTable(v) and isNumber(v.x and v.y and v.z) end
        
        function runFlush()
            ---------- Global Values ----------
            local clamp  = utils.clamp
            local function signedRotationAngle(normal, vecA, vecB)
                vecA = vecA:project_on_plane(normal)
                vecB = vecB:project_on_plane(normal)
                return math.atan(vecA:cross(vecB):dot(normal), vecA:dot(vecB))
            end
        
            if (pitchPID == nil) then
                pitchPID = pid.new(0.1, 0, 11)
                rollPID = pid.new(0.1, 0, 11)
                yawPID = pid.new(0.1, 0, 11)
            end
            ------------------------------------
        
            apBrakeDist,brakeTime = Kinematic.computeDistanceAndTime(speedVec:len(),0,mass + dockedMass,0,0,maxBrake)
        
            local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
            local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
            local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
            local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
            local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
            local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
            local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01
        
            local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
            local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
            local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
        
            -- validate params
            pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
            yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
            rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
            torqueFactor = math.max(torqueFactor, 0.01)
            brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
            brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
            autoRollFactor = math.max(autoRollFactor, 0.01)
            turnAssistFactor = math.max(turnAssistFactor, 0.01)
        
            -- final inputs
            local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
            local finalRollInput = rollInput + system.getControlDeviceYawInput()
            local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
            local finalBrakeInput = brakeInput
        
            -- Axis
            local worldVertical = vec3(core.getWorldVertical()) -- along gravity
            local constructUp = vec3(construct.getWorldOrientationUp())
            constructForward = vec3(construct.getWorldOrientationForward())
            constructRight = vec3(construct.getWorldOrientationRight())
            constructVelocity = vec3(construct.getWorldVelocity())
            local constructVelocityDir = vec3(constructVelocity):normalize()
            local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
            local currentRollDegAbs = math.abs(currentRollDeg)
            local currentRollDegSign = utils.sign(currentRollDeg)
        
            -- Rotation
            local constructAngularVelocity = vec3(construct.getWorldAngularVelocity())
            -- SETUP AUTOPILOT ROTATIONS --
            local targetAngularVelocity = vec3()
        
            local destVec = vec3()
            local currentYaw = 0
            local currentPitch = getPitch(worldVertical, constructForward, constructRight)
            local currentRoll = getRoll(worldVertical, constructForward, constructRight)
            local targetYaw = 0
            local targetPitch = 0
            local yawChange = 0
            local pitchChange = 0
            local total_align = 0
            --local totalAngularChange = nil
            if autopilot_dest then
                destVec = vec3(autopilot_dest - constructPosition):normalize()
                local dirYaw = -math.deg(signedRotationAngle(constructUp:normalize(), destVec:normalize(), constructForward:normalize()))
                local dirPitch = math.deg(signedRotationAngle(constructRight:normalize(), destVec:normalize(), constructForward:normalize()))
        
                local speedYaw = -math.deg(signedRotationAngle(constructUp:normalize(), destVec:normalize(), constructVelocity))
                local speedPitch = math.deg(signedRotationAngle(constructRight:normalize(), destVec:normalize(), constructVelocity))
        
                local yawDiff = -math.deg(signedRotationAngle(constructUp:normalize(), constructVelocity:normalize(), constructForward:normalize()))
                local pitchDiff = math.deg(signedRotationAngle(constructRight:normalize(), constructVelocity:normalize(), constructForward:normalize()))
        
                if speed < 40 then
                    yawChange = dirYaw
                    pitchChange = dirPitch
                else
                    yawChange = speedYaw
                    pitchChange = speedPitch
        
                    if math.abs(yawDiff) > 30 then yawChange = dirYaw end
                    if math.abs(pitchDiff) > 30 then pitchChange = dirPitch end
                end
                total_align = math.abs(yawChange) + math.abs(pitchChange)
            end
        
            local apRollInput = 0
            if orbit_active then
                if speed > 50 or true then
                    -- Orbit mode: Tangential steering with radius, altitude, and roll corrections
                    local to_center = orbit_center - constructPosition
                    local radial = to_center:normalize()
                    local dist = to_center:len()
                    local up = worldVertical:normalize()
                    local tangential = radial:cross(up):normalize()
                    local proj1 = constructVelocityDir:dot(tangential)
                    local proj2 = constructVelocityDir:dot(-tangential)
                    if proj2 > proj1 then tangential = -tangential end  -- Match current velocity direction
        
                    -- Radius correction
                    local radius_error = (dist - orbit_radius)/orbit_radius  -- Positive if too far
                    local radial_correction = -radial * radius_error
        
                    -- Target direction for steering
                    local target_dir = (tangential):normalize()
        
                    -- Rotation injections (yaw)
                    dirYaw = -math.deg(signedRotationAngle(constructUp:normalize(), target_dir, constructVelocity))/360
                    yawChange = clamp(radius_error * 20 + dirYaw * 10 , -1, 1)
                    if math.abs(yawChange) < 0.2 then
                        yawChange = clamp(radius_error * 10 + dirYaw * 20 , -1, 1)
                    end
        
                    -- Roll correction to level with planet
                    rollPID:inject(-currentRoll)
                    apRollInput = rollPID:get()
                    if apRollInput > AP_Max_Rotation_Factor then apRollInput = AP_Max_Rotation_Factor
                    elseif apRollInput < -AP_Max_Rotation_Factor then apRollInput = -AP_Max_Rotation_Factor
                    end
        
                    -- Altitude hold with PID using pitch
                    local speedPitch = math.deg(signedRotationAngle(constructRight:normalize(), constructVelocity:normalize(), constructForward:normalize())) --USE THIS TO Ensure we don't over pitch maybe
        
                    local current_agl = core.getAltitude()
                    local height_error = orbit_agl - current_agl  -- Positive if too low
                    pitchChange = clamp(height_error-currentPitch, -100, 100) * 0.75
                    if pitchChange > 1 then pitchChange = 1
                    elseif pitchChange < -1 then pitchChange = -1
                    end
        
                    system.print(string.format("AP Yaw: %.2f, Pitch: %.2f, Roll: %.2f, speedPitch: %.2f", yawChange, pitchChange, apRollInput, speedPitch ))
                end
            end
        
            if autopilot and (autopilot_dest ~= nil or orbit_active) and Nav.axisCommandManager:getThrottleCommand(0) ~= 0 then
                yawPID:inject(yawChange)
                local apYawInput = yawPID:get()
                if apYawInput > AP_Max_Rotation_Factor then apYawInput = AP_Max_Rotation_Factor
                elseif apYawInput < -AP_Max_Rotation_Factor then apYawInput = -AP_Max_Rotation_Factor
                end
        
                pitchPID:inject(pitchChange)
                local apPitchInput = -pitchPID:get()
                if orbit_active then
                    apPitchInput = pitchPID:get()
                end
                if apPitchInput > AP_Max_Rotation_Factor then apPitchInput = AP_Max_Rotation_Factor
                elseif apPitchInput < -AP_Max_Rotation_Factor then apPitchInput = -AP_Max_Rotation_Factor
                end
                targetAngularVelocity = apYawInput * 2 * constructUp
                                        + apPitchInput * 2 * constructRight
                                        + finalPitchInput * pitchSpeedFactor * constructRight
                                        + finalRollInput * rollSpeedFactor * constructForward
                                        + finalYawInput * yawSpeedFactor * constructUp
                if orbit_active then
                    targetAngularVelocity = targetAngularVelocity + apRollInput * constructForward
                end
            else
                targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                    + finalRollInput * rollSpeedFactor * constructForward
                    + finalYawInput * yawSpeedFactor * constructUp
            end
        
            ---------------------------------
        
            -- In atmosphere?
            if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 and false then
                local autoRollRollThreshold = 1.0
                -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                    local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                    if (rollPID == nil) then
                        rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                    end
                    rollPID:inject(targetRollDeg - currentRollDeg)
                    local autoRollInput = rollPID:get()
        
                    targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                end
                local turnAssistRollThreshold = 20.0
                -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                    local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                    local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range
        
                    -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                    local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                    local rollVerticalRatio = 0
                    if rescaleRollDegAbs < 90 then
                        rollVerticalRatio = rescaleRollDegAbs / 90
                    elseif rescaleRollDegAbs < 180 then
                        rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                    end
        
                    rollVerticalRatio = rollVerticalRatio * rollVerticalRatio
        
                    local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                    local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio
        
                    targetAngularVelocity = targetAngularVelocity
                                        + turnAssistPitchInput * constructRight
                                        + turnAssistYawInput * constructUp
                end
            end
        
            -- Engine commands
            local keepCollinearity = 1 -- for easier reading
            local dontKeepCollinearity = 0 -- for easier reading
            local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we do not go to the next priorities
        
            -- Rotation
            if not dampening and not autopilot then
                constructAngularVelocity = vec3(construct.getWorldAngularVelocity())*.1
            end
        
            local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
            if not dampening then
                angularAcceleration = angularAcceleration*dampenerTorqueReduction
            end
        
            local airAcceleration = vec3(construct.getWorldAirFrictionAngularAcceleration())
            angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
            Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)
        
            -- Brakes
            local brakeAcceleration = vec3()
            if autopilot then
                if autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= apBrakeDist + AP_Brake_Buffer or brakesOn or (total_align > 5 and speed < 40) then
                    brakeAcceleration = -maxBrake * constructVelocityDir
                    brakeInput = 1
                elseif autopilot_dest ~= nil and not brakesOn then
                    brakeAcceleration = vec3()
                    brakeInput = 0
                end
            else
                brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
            end
            if atmoSpeedLimit and inAtmo and speed >= .98*maxAtmoSpeed then
                brakeAcceleration = -maxBrake * constructVelocityDir
                brakeInput = 1
            elseif atmoSpeedLimit and inAtmo and not brakesOn and not autopilot then
                brakeAcceleration = vec3()
                brakeInput = 0
            end
            Nav:setEngineForceCommand('brake', brakeAcceleration)
        
            -- AutoNavigation regroups all the axis command by 'TargetSpeed'
            local autoNavigationEngineTags = ''
            local autoNavigationAcceleration = vec3()
            local autoNavigationUseBrake = false
        
            -- Longitudinal Translation
            local longitudinalEngineTags = 'thrust analog longitudinal'
            if #enabledEngineTags > 0 then
                longitudinalEngineTags = longitudinalEngineTags .. ' disengaged'
                for i,tag in pairs(enabledEngineTags) do
                    longitudinalEngineTags = longitudinalEngineTags .. ',thrust analog longitudinal '.. tag
                end
            end
            local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
            local longitudinalAcceleration = vec3()
        
            if autopilot and autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= apBrakeDist + AP_Brake_Buffer + speed then
                Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
                longitudinalAcceleration = vec3()
                Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
            elseif autopilot and autopilot_dest ~= nil and speed < maxSpeed and enginesOn then
                Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,1)
                longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
            elseif autopilot and autopilot_dest ~= nil and speed >= maxSpeed - 10 then
                Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
                longitudinalAcceleration = vec3()
                Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                enginesOn = false
            else
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end
        
                end
            end
        
            -- Lateral Translation
            local lateralStrafeEngineTags = 'thrust analog lateral'
            local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
            if (lateralCommandType == axisCommandType.byThrottle) then
                local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
            elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
            end
        
            -- Vertical Translation
            local verticalStrafeEngineTags = 'thrust analog vertical'
            local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
            if (verticalCommandType == axisCommandType.byThrottle) then
                local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
            elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
            end
        
            -- Auto Navigation (Cruise Control)
            if (autoNavigationAcceleration:len() > constants.epsilon) then
                if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                then
                    autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                end
                Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
            end
        
            -- Rockets
            Nav:setBoosterCommand('rocket_engine')
        
            -- Disable Auto-Pilot when destination is reached --
            if autopilot and autopilot_dest ~= nil and vec3(constructPosition - autopilot_dest):len() <= apBrakeDist + 1200 + AP_Brake_Buffer and speed < 1000 then
                brakeInput = brakeInput + 1
                Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal,0)
                Nav:setEngineForceCommand(longitudinalEngineTags, vec3(), keepCollinearity)
                if not route then
                    system.print('-- Autopilot complete --')
                    autopilot_dest_pos = nil
                    autopilot = false
                elseif route and speed < 40 and routes[route][route_pos+1] ~= nil and vec3(constructPosition - autopilot_dest):len() <= 1200+AP_Brake_Buffer then
                    system.print('-- Route pilot point complete --')
                    system.print('-- Starting next point --')
                    route_pos = route_pos+1
                    autopilot_dest = vec3(convertWaypoint(routes[route][route_pos]))
                    autopilot_dest_pos = routes[route][route_pos]
                    system.print('-- Route pilot destination set --')
                    brakesOn = false
                    enginesOn = true
                    system.print(routes[route][route_pos])
                elseif route and route_pos == #routes[route] then
                    system.print('-- Route pilot complete --')
                    autopilot_dest_pos = nil
                    autopilot = false
                    route = nil
                    route_pos = nil
                    db_1.clearValue('route')
                    db_1.clearValue('route_pos')
                    db_1.setIntValue('record',0)
                end
            end
            ---------------------------------------------------
        end
        
        function runTimerScreen()
            arkTime = system.getArkTime()
            local dataUpdate = false
            if dataUpdateCounter % dataUpdateRatio == 0 then
                dataUpdateCounter = 0
                dataUpdate = true
            else
                dataUpdateCounter = dataUpdateCounter + 1
            end
        
            local cFPS = FPS_COUNTER/(arkTime - FPS_INTERVAL)
            if fps_data['avg'] == nil then fps_data['avg'] = cFPS end
            FPS = string.format('%.1f | %.1f',cFPS,fps_data['avg'])
            FPS_COUNTER = 0
            FPS_INTERVAL = arkTime
            
            if debug then
                fps_data['count'] = fps_data['count'] + 1
                fps_data['sum'] = fps_data['sum'] + cFPS
                if cFPS > fps_data['max'] then fps_data['max'] = cFPS end
                if cFPS < fps_data['min'] and cFPS > 5 then fps_data['min'] = cFPS end
                if fps_data['avg'] ~= cFPS then
                    fps_data['avg'] = (fps_data['sum'])/fps_data['count']
                end
            end
            bgColor = ''
            lineColor = ''
            fontColor = ''
            if inSZ then 
                bgColor='rgba(25, 25, 50, 0.35)'
                lineColor='rgba(150, 175, 185, .75)'
                fontColor='rgba(225, 250, 265, 1)' 
            else 
                bgColor='rgba(175, 75, 75, 0.30)'
                lineColor='rgba(220, 50, 50, .75)'
                fontColor='rgba(225, 250, 265, 1)'
            end
            
            -- Check player seated status --
            seated = player.isSeated()
            if seated and not player.isFrozen() then
                player.freeze(1)
            elseif not seated and player.isFrozen() then
                player.freeze(0)
            end
            ----------------------------------
            if dataUpdate then
                cName = construct.getName()
            end
            if transponder_1 then tags = transponder_1.getTags() end
            
            ----------------------------------
            
            
            -- Shield Updates --
            if shield_1 then
                srp = shield_1.getResistancesPool()
                csr = shield_1.getResistances()
                rcd = shield_1.getResistancesCooldown()
                rem = shield_1.getResistancesRemaining()
                srr = shield_1.getStressRatioRaw()
                ventCD = shield_1.getVentingCooldown()
            
                if shieldProfile == 'auto' then
                    if srr[1] == 0 and srr[2] == 0 and srr[3] == 0 and srr[4] == 0 then -- No stress
                        dmgTick = nil
                        if (csr[1] == srp/4 and csr[2] == srp/4 and csr[3] == srp/4 and csr[4] == srp/4) or rcd ~= 0 then
                            --No change
                        else
                            shield_1.setResistances(srp/4,srp/4,srp/4,srp/4)
                        end
                    elseif dmgTick then
                        if math.abs(arkTime - dmgTick) >= initialResistWait then
                            if not ((csr[1] == (srp*srr[1]) and csr[2] == (srp*srr[2]) and csr[3] == (srp*srr[3]) and csr[4] == (srp*srr[4])) or rcd ~= 0) then -- If ratio hasn't change, or timer is not up, don't waste the resistance change timer.
                                shield_1.setResistances(srp*srr[1],srp*srr[2],srp*srr[3],srp*srr[4])
                            end
                        end
                    end
                elseif not resistProfiles[shieldProfile] then
                    system.print('-- Detected invalid shield profile --')
                    shieldProfile = 'auto'
                else
                    if not (csr[1] == srp*resistProfiles[shieldProfile]['am']
                        and csr[2] == srp*resistProfiles[shieldProfile]['em']
                        and csr[3] == srp*resistProfiles[shieldProfile]['kn']
                        and csr[4] == srp*resistProfiles[shieldProfile]['th']) then
                        if not rcd ~= 0 then
                            shield_1.setResistances(
                                srp*resistProfiles[shieldProfile]['am'],
                                srp*resistProfiles[shieldProfile]['em'],
                                srp*resistProfiles[shieldProfile]['kn'],
                                srp*resistProfiles[shieldProfile]['th']
                            )
                        end
                    end
                end
            
                shp = shield_1.getShieldHitpoints()
                venting = shield_1.isVenting()
                if not venting and shp == 0 and autoVent then
                    shield_1.startVenting()
                elseif not shield_1.isActive() and not venting or vec3(homeBaseVec - constructPosition):len() < homeBaseDistance*1000 then
                    if homeBaseVec then
                        if vec3(homeBaseVec - constructPosition):len() >= homeBaseDistance*1000 then
                            shield_1.activate()
                        else
                            shield_1.deactivate()
                        end
                    else
                        shield_1.activate()
                    end
                end
            
                if core then coreHP = (core.getMaxCoreStress()-core.getCoreStress())/core.getMaxCoreStress() end
            end
            -- End Shield Updates --
            
            
            -- Engine Tag Filtering --
            if dataUpdate then
                local engTable = {}
                local tempTag = nil
                local offset = 0
                for i,tag in pairs(enabledEngineTags) do
                    if i % 2 == 0 then 
                        engTable[#engTable+1] = [[
                            <text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (i-2)*.008) * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-weight="bold" font-size="]].. font_size_ratio ..[[vh">]]..tag.. ',' ..tempTag..[[</text>    
                        ]]
                        tempTag = nil
                        offset = offset + 1
                    else
                        tempTag = tag
                    end
                end
                if tempTag ~= nil then 
                    engTable[#engTable+1] = [[<text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (offset)*.016) * screenHeight) ..[[" style="fill: rgb(60, 255, 60);" font-weight="bold" font-size="]].. font_size_ratio ..[[vh">]]..tempTag..[[</text>]]
                end
                if #engTable == 0 then
                    engTable[#engTable+1] = [[<text x="]].. tostring(.001 * screenWidth) ..[[" y="]].. tostring((.060 + (offset)*.008) * screenHeight) ..[[" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio ..[[vh">ALL</text>]]
                end
                enabledEngineTagsStr = table.concat(engTable,'')
            end
            ----------------------------
            
            -- Safe Zone Distance --
            if dataUpdate then
                inSZ = not construct.isInPvPZone()
                SZD = math.abs(construct.getDistanceToSafeZone())
                
                SZDStr = ''
                if SZD < 1000 then SZDStr = string.format('%.2f m',SZD)
                elseif SZD < 100000 then SZDStr = string.format('%.2f km',SZD/1000)
                else SZDStr = string.format('%.2f su',SZD*.000005)
                end
            end
            ---------------------------
            
            -- Planet Location Updates --
            if dataUpdate then
                closestPlanetName,closestPlanetDist = closestPlanet()
                if cr == nil then
                    cr = coroutine.create(closestPipe)
                elseif cr ~= nil then
                    if coroutine.status(cr) == "suspended" then
                        coroutine.resume(cr)
                    elseif coroutine.status(cr) == "dead" then
                        cr = nil
                    end
                end
                closestPipeStr = string.format('%s (%s)',closestPipeName,formatNumber(closestPipeDistance,'distance'))
                closestPlanetStr = string.format('%s (%s)',closestPlanetName,formatNumber(closestPlanetDist,'distance'))
            end
            ---- End Planet Updates ----
            
            ------- Warp Drive Brake activation ------
            if construct.isWarping() then
                brakeInput = 1
                brakesOn = true
            end
            -----------------------------------------
            -- Throttle Status --
            if Nav.axisCommandManager:getMasterMode() == controlMasterModeId.travel then mode = 'Throttle ' .. tostring(Nav.axisCommandManager:getThrottleCommand(0) * 100) .. '%' modeBG = bgColor
            else mode = 'Cruise '  .. string.format('%.2f',Nav.axisCommandManager:getTargetSpeed(0)) .. ' km/h' modeBG = 'rgba(99, 250, 79, 0.5)'
            end
            ---------------------
            
            CCSPercent = 0
            if coreHP ~= 0 then
                CCSPercent = 100*coreHP
            end
            
            if CCSPercent < 25 and CCSPercent > 1 then
                if db_1 then db_1.clearValue('homeBaseLocation') end
                if transponder_1 then transponder_1.setTags({}) end
            elseif CCSPercent == 0 and shieldPercent < 5 then
                if db_1 then db_1.clearValue('homeBaseLocation') end
                if transponder_1 then transponder_1.setTags({}) end
            end
            
            shieldPercent = 0
            shieldPercent = shp/maxSHP*100
            
            if shieldPercent < 15 then
                shieldWarningHTML = string.format([[
                    <svg width="115.2" height="64.8" x="792" y="648" style="fill: red;">
                        %s
                    </svg>
                    <text x="894" y="691.2" style="fill: red" font-size="]].. font_size_ratio+2.42 ..[[vh" font-weight="bold">SHIELD CRITICAL</text>
                ]],warningSymbols['svgCritical'])
            elseif shieldPercent < 30 then
                shieldWarningHTML = string.format([[
                    <svg width="115.2" height="64.8" x="792" y="648" style="fill: orange;">
                        %s
                    </svg>
                    <text x="894" y="691.2" style="fill: orange" font-size="]].. font_size_ratio+2.42 ..[[vh" font-weight="bold">SHIELD LOW</text>
                ]],warningSymbols['svgWarning'])
            else
                shieldWarningHTML = ''
            end
            
            local placement = 0
            local temp = {}
            for i = 4, CCSPercent, 4 do 
                temp[#temp+1] = string.format([[<line style="stroke-width: 5px; stroke-miterlimit: 1; stroke: rgb(60, 255, 60); fill: none;" x1="%s" y1="56" x2="%s" y2="72" bx:origin="0 0.096154"/>]],
                5+placement,5+placement)
                placement = placement + 10
            end
            ccsHTML = table.concat(temp,'')
            
            ventHTML = ''
            if shield_1 then
                if ventCD > 0 then
                    ventHTML = string.format([[
                        <text style="fill: rgb(255, 60, 60); font-family: Arial; font-size: 11.8px; paint-order: fill; white-space: pre;" x="66" y="91.01" bx:origin="-2.698544 2.296589">Vent Cooldown: </text>
                        <text style="fill: rgb(255, 60, 60); font-family: Arial; font-size: 11.8px; paint-order: fill; white-space: pre;" x="151" y="91.01" bx:origin="-2.698544 2.296589">%.2fs</text>
                    ]],ventCD)
                end
            end
            
            local placement = 0
            temp = {}
            for i = 4, shieldPercent, 4 do 
                temp[#temp+1] = string.format([[<line style="stroke-width: 5px; stroke-miterlimit: 1; stroke: rgb(25, 247, 255); fill: none;" x1="%s"   y1="42" x2="%s"   y2="55" bx:origin="0 0.096154"/>]],
                5+placement,5+placement)
                placement = placement + 10
            end
            shieldHTML = table.concat(temp,'')
            
            if not venting or not shield_1 then
                warnings['venting'] = nil
            else 
                warnings['venting'] = 'svgCritical'
            end
            
            if shield_1 then
                amS = srr[1]
                emS = srr[2]
                knS = srr[3]
                thS = srr[4]
                amR = csr[1]/srp
                emR = csr[2]/srp
                knR = csr[3]/srp
                thR = csr[4]/srp
                shield_resist_cd = shield_1.getResistancesCooldown()
            end
            
            if showHelp then
                if dataUpdate then
                    DamageGroupMap = {}
                    DamageGroupMap['Engine'] = {}
                    DamageGroupMap['Engine']['Total'] = 0
                    DamageGroupMap['Engine']['Current'] = 0
                
                    DamageGroupMap['Control'] = {}
                    DamageGroupMap['Control']['Total'] = 0
                    DamageGroupMap['Control']['Current'] = 0
                
                    DamageGroupMap['Weapons'] = {}
                    DamageGroupMap['Weapons']['Total'] = 0
                    DamageGroupMap['Weapons']['Current'] = 0
                
                    DamageGroupMap['Misc'] = {}
                    DamageGroupMap['Misc']['Total'] = 0
                    DamageGroupMap['Misc']['Current'] = 0
                
                    brokenElements = {}
                    brokenElements['Engine'] = {}
                    brokenElements['Control'] = {}
                    brokenElements['Weapons'] = {}
                
                    brokenDisplay = {}
                    brokenDisplay['Engine'] = ''
                    brokenDisplay['Control'] = ''
                    brokenDisplay['Weapons'] = ''
                
                    local itemClasses = {}
                    for _,id in pairs(core.getElementIdList()) do
                        local itemClass = core.getElementClassById(id)
                        local itemDisplay = core.getElementDisplayNameById(id)
                        if string.find(string.lower(itemClass),'engine')
                            or string.find(string.lower(itemClass),'brake') then
                            DamageGroupMap['Engine']['Total'] = DamageGroupMap['Engine']['Total'] + core.getElementMaxHitPointsById(id)
                            DamageGroupMap['Engine']['Current'] = DamageGroupMap['Engine']['Current'] + core.getElementHitPointsById(id)
                            if not (core.getElementHitPointsById(id) > 0) then
                                if brokenElements['Engine'][itemDisplay] == nil then
                                    brokenElements['Engine'][itemDisplay] = 1
                                else
                                    brokenElements['Engine'][itemDisplay] = brokenElements['Engine'][itemDisplay] + 1
                                end
                            end
                        elseif string.find(string.lower(itemClass),'control')
                            or string.find(string.lower(itemClass),'pvpseat')
                            or string.find(string.lower(itemClass),'fuel') then
                            DamageGroupMap['Control']['Total'] = DamageGroupMap['Control']['Total'] + core.getElementMaxHitPointsById(id)
                            DamageGroupMap['Control']['Current'] = DamageGroupMap['Control']['Current'] + core.getElementHitPointsById(id)
                            if not (core.getElementHitPointsById(id) > 0) then
                                if brokenElements['Control'][itemDisplay] == nil then
                                    brokenElements['Control'][itemDisplay] = 1
                                else
                                    brokenElements['Control'][itemDisplay] = brokenElements['Control'][itemDisplay] + 1
                                end
                            end
                        elseif string.find(string.lower(itemClass),'ammocontainer')
                            or string.find(string.lower(itemClass),'radar')
                            or string.find(string.lower(itemClass),'weapon') then
                            DamageGroupMap['Weapons']['Total'] = DamageGroupMap['Weapons']['Total'] + core.getElementMaxHitPointsById(id)
                            DamageGroupMap['Weapons']['Current'] = DamageGroupMap['Weapons']['Current'] + core.getElementHitPointsById(id)
                            if not (core.getElementHitPointsById(id) > 0 ) then
                                if brokenElements['Weapons'][itemDisplay] == nil then
                                    brokenElements['Weapons'][itemDisplay] = 1
                                else
                                    brokenElements['Weapons'][itemDisplay] = brokenElements['Weapons'][itemDisplay] + 1
                                end
                            end
                        else
                            DamageGroupMap['Misc']['Total'] = DamageGroupMap['Misc']['Total'] + core.getElementMaxHitPointsById(id)
                            DamageGroupMap['Misc']['Current'] = DamageGroupMap['Misc']['Current'] + core.getElementHitPointsById(id)
                        end
                    end
                    for k,v in pairs(brokenElements) do
                        for dk,dv in pairs(v) do
                            if brokenDisplay[k] == nil then
                                brokenDisplay[k] = 'Broken: '
                            end
                            brokenDisplay[k] = brokenDisplay[k] .. string.format(' %sx %s,',dv,dk)
                        end
                    end
                end
            end
            
            if dataUpdate then
                fuelHTML = profile(fuelWidget,'fuelWidget')
                shipNameHTML = profile(shipNameWidget,'shipNameWidget')
                dpsHTML = profile(dpsWidget,'dpsWidget')
                systemCheckHTML = profile(systemCheckWidget,'systemCheckWidget')
            end
        end
        
        function runUpdate()
            Nav:update()
            FPS_COUNTER = FPS_COUNTER + 1
            ticker = ticker + 1
        
            cAltitude = core.getAltitude()
            if atmoManualLimit == 0 then
                maxAtmoSpeed = construct.getFrictionBurnSpeed()*3.6
            else
                maxAtmoSpeed = atmoManualLimit
            end
            inAtmo = unit.getAtmosphereDensity() > 0
        
            speedVec = vec3(constructVelocity)
            speed = speedVec:len() * 3.6
            if speed < 50 then speedVec = vec3(constructForward) end
            if route and routes[route][route_pos] == autopilot_dest_pos then
                maxSpeed = route_speed
            else
                maxSpeed = construct.getMaxSpeed() * 3.6
            end
            gravity = core.getGravityIntensity()
            mass = construct.getMass()
            constructPosition = vec3(construct.getWorldPosition())
            maxBrake = json.decode(unit.getWidgetData()).maxBrake
            if maxBrake == nil then maxBrake = 0 end
            maxThrustTags = 'thrust'
            if #enabledEngineTags > 0 then
                maxThrustTags = maxThrustTags .. ' disengaged'
                for i,tag in pairs(enabledEngineTags) do
                    maxThrustTags = maxThrustTags .. ',thrust '.. tag
                end
            end
            maxThrust = construct.getMaxThrustAlongAxis(maxThrustTags,construct.getOrientationForward())
            maxSpaceThrust = math.abs(maxThrust[3])
        
            dockedMass = 0
            for _,id in pairs(construct.getDockedConstructs()) do 
                dockedMass = dockedMass + construct.getDockedConstructMass(id)
            end
            for _,id in pairs(construct.getPlayersOnBoard()) do 
                dockedMass = dockedMass + construct.getBoardedPlayerMass(id)
            end
            brakeDist,brakeTime = Kinematic.computeDistanceAndTime(speedVec:len(),0,mass + dockedMass,0,0,maxBrake)
            accel = vec3(construct.getWorldAcceleration()):len()
        
            -- SCREEN UPDATES --
            if autopilot_dest and speed > 1000 then
                local balance = vec3(autopilot_dest - constructPosition):len()/(speed/3.6) --meters/(meter/second) == seconds
                local seconds = balance % 60
                balance = balance // 60
                local minutes = balance % 60
                balance = balance // 60
                local hours = balance % 60
                apHTML = [[
                    <text x="537.6" y="59.4" style="fill: rgba(200, 225, 235, 1)" font-size="]].. font_size_ratio+0.42 ..[[vh" font-weight="bold">ETA: ]]..string.format('%.0f:%.0f.%.0f',hours,minutes,seconds)..[[</text>
                ]]
            end
        
            apBG = bgColor
            if autopilot then apBG = 'rgba(99, 250, 79, 0.5)' apStatus = 'Engaged' if route and routes[route][route_pos] == autopilot_dest_pos then apStatus = route end end
            if not autopilot and autopilot_dest ~= nil then apStatus = 'Set' if route and routes[route][route_pos] == autopilot_dest_pos then apStatus = route end end
        
            if route_pos and route_pos ~= db_1.getIntValue('route_pos',route_pos) then db_1.setIntValue('route_pos',route_pos) end
            -- END SCREEN UPDATES --
        
            -- Generate Screen overlay --
            if speed ~= nil and ticker % 3 == 0 then
                ticker = 0
                profile(generateScreen,'generateScreen')
            end
            -----------------------------
        end
    onUpdate:
      lua: |
        profile(runUpdate,'runUpdate')
    onFlush:
      lua: |
        --profile(runFlush,'runFlush')
        status, err = pcall(runFlush)
        if status then
            --system.print("runFlush() success")
        else
            system.print("runFlush() error: " .. err)
        end
    onInputText(text):
      lua: |
        if text:lower() == 'clear route' then
            db_1.clearValue('route')
            db_1.clearValue('route_pos')
            route = nil
            route_pos = nil
        end
        if text:lower() == 'print route' then
            system.print(string.format('Route: %s',route))
            system.print(string.format('Current Point: %s',route_pos))
            system.print(string.format('Current Destination: %s',routes[route][route_pos]))
        end
        if text:lower() == 'restart route' then
            if db_1.hasKey('route') and routes[db_1.getStringValue('route')] ~= nil and routes[db_1.getStringValue('route')][db_1.getIntValue('route_pos')] then
                system.print('-- Restarting DB route --')
                route = db_1.getStringValue('route')
                route_pos = db_1.getIntValue('route_pos')
                autopilot_dest = vec3(convertWaypoint(routes[route][route_pos]))
                autopilot_dest_pos = routes[route][route_pos]
            else
                system.print('-- No route found in DB --')
            end
        end
        if string.starts(text,'route ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches < 2 then
                system.print('-- Requires a route name --')
            else
                if routes[matches[2]] == nil then
                    system.print('-- Route not found --')
                else
                    system.print('-- Starting route --')
                    autopilot_dest = vec3(convertWaypoint(routes[matches[2]][1]))
                    autopilot_dest_pos = routes[matches[2]][1]
                    system.print('-- Route pilot destination set --')
                    system.print(routes[matches[2]][1])
                    route = matches[2]
                    route_pos = 1
                    db_1.setStringValue('route',matches[2])
                    db_1.setIntValue('route_pos',1)
                end
            end
        end
        if text:lower() == 'offset markers' then
            if offset_points then offset_points = false else offset_points = true end
        end
        if string.starts(text,'addWaypoint ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches < 2 then
                system.print('-- Requires a position tag with the command --')
            elseif #matches > 3 then
                system.print('-- only a position tag and name can be given with the command --')
                system.print('-- addWaypoint <position tag> [name] --')
            else
                AR_Temp = true
                if #matches == 2 then
                    AR_Temp_Points['Temp_' .. tostring(#AR_Temp_Points)] = matches[2]
                    system.print(string.format('-- Added waypoint "%s" (%s) --','Temp_' .. tostring(#AR_Temp_Points),matches[2]))
                else
                    AR_Temp_Points[matches[3]] = matches[2]
                    system.print(string.format('-- Added waypoint "%s" (%s) --',matches[3],matches[2]))
                end
            end
        end
        if string.starts(text,'delWaypoint ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches ~= 2 then
                system.print('-- Requires a waypoint name with the command --')
            else
                local rem = nil
                local count = 0
                for k,v in pairs(AR_Temp_Points) do
                    count = count + 1
                    if k == matches[2] then
                        rem = k
                    end
                end
                if rem then AR_Temp_Points[rem] = nil count = count -1 system.print(string.format('-- Removed waypoint "%s"',rem)) end
                if count == 0 then AR_Temp = false end
            end
        end
        if string.starts(text,'::pos{') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if trackerMode then
                if #trackerList == 0 then
                    table.insert(trackerList,matches[1])
                    system.print(string.format('-- 1st Position: %s',matches[1]))
                elseif trackerList[1] == matches[1] then system.print('-- 2nd trajectory point is the same as the first --')
                else
                    table.insert(trackerList,1,matches[1])
                    system.print(string.format('-- 1st Position: %s',trackerList[2]))
                    system.print(string.format('-- 2nd Position: %s',matches[1]))
        
                    AR_Temp_Points['Spotted'] = trackerList[1]
                    local P1 = vec3(convertWaypoint(trackerList[2]))
                    local P2 = vec3(convertWaypoint(trackerList[1]))
                    local T5 = P1+5/.000005*(P2 - P1)/vec3(P2-P1):len()
                    local T30 = P1+30/.000005*(P2 - P1)/vec3(P2-P1):len()
                    local T50 = P1+50/.000005*(P2 - P1)/vec3(P2-P1):len()
                    local t5p = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T5['x'],T5['y'],T5['z'])
                    local t30p = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T30['x'],T30['y'],T30['z'])
                    local t50p = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T50['x'],T50['y'],T50['z'])
                    AR_Temp_Points['T5'] = t5p
                    AR_Temp_Points['T30'] = t30p
                    AR_Temp_Points['T50'] = t50p
        
                    system.print(string.format('--  5su Position: %s',t5p))
                    system.print(string.format('-- 30su Position: %s',t30p))
                    system.print(string.format('-- 50su Position: %s',t50p))
        
                    autopilot_dest = T50
                    autopilot_dest_pos = string.format('::pos{0,0,%.2f,%.2f,%.2f}',T50['x'],T50['y'],T50['z'])
                    system.setWaypoint(autopilot_dest_pos)
        
                    system.print('-- Trajectory points added --')
                end
                if #trackerList == 3 then table.remove(trackerList,3) end
            else
                autopilot_dest = vec3(convertWaypoint(matches[1]))
                autopilot_dest_pos = matches[1]
                system.print('-- Autopilot destination set --')
                system.print(string.format('::pos{0,0,%.2f,%.2f,%.2f}',autopilot_dest['x'],autopilot_dest['y'],autopilot_dest['z']))
            end
        end
        if string.starts(text:lower(),'code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            table.insert(tags,matches[2])
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Added--')
        end
        if string.starts(text:lower(),'delcode') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            local r = nil
            for i,v in ipairs(tags) do if v == matches[2] then r = i end end
            table.remove(tags,r)
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Removed--')
        end
        if string.starts(text:lower(),'sp ') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches ~= 2 then system.print('-- Invalid input --')
            elseif resistProfiles[matches[2]:lower()] then shieldProfile = matches[2]:lower() system.print('-- Shield profile set: '..matches[2]:lower())
            else system.print('-- Shield profile not found --') system.print('-- Current profile: '..shieldProfile) end
        end
        if string.starts(text:lower(),'show codes') then
            system.print('--Transponder Codes visible--')
            for _,t in pairs(tags) do
                system.print('-- '..t)
            end
            system.print('-----------------------------')
        end
        if string.starts(text,'warp') then
            if string.starts(text,'warpFrom') then
                matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                if #matches == 3 then
                    dest = convertWaypoint(matches[3])
                    start = convertWaypoint(matches[2])
                else
                    system.print('Invalid entry')
                end
            elseif string.starts(text,'warp ') then
                start = nil
                matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                dest = convertWaypoint(matches[2])
            end
        
        
            -- Print out a designator to more easily tell
            -- multiple entries apart
            system.print('---------------------')
        
            -- Set initial minimum distance parameter to nil/empty
            local minDist = nil
            local pipeName = 'None'
        
            -- If we are entered both a start point and destination
            -- we will print out slightly different output
            if not start then
                curPos = vec3(construct.getWorldPosition())
                system.print('Selected Destination: ' .. text)
            else
                curPos = start
                system.print('Selected start position: ' .. matches[2])
                system.print('Selected Destination: ' .. matches[3])
            end
        
            -- Loop through all possible warp destinations.
            -- Determine each ones min distance from their
            -- line segment. If that distance is less than
            -- the global minimum, then we have found a new
            -- global minimum
            distType = ''
            for k,v in pairs(warp_beacons) do
                dist,tempType = pipeDist(curPos,v,dest,true)
                if dist ~= nil then
                    -- Once we know which one is the smallest, compare
                    -- it to our current smallest distance and see who
                    -- wins! If this one is smaller, we have a new
                    -- winner! Lets record the name and distance of the
                    -- new winner.
                    if not minDist or dist < minDist then
                        minDist = dist
                        pipeName = k
                        distType = tempType
                    end
                end
            end
        
            -- After we have checked all possible options, print out the final name
            -- and distance.
            system.print(string.format('Closest Warp %s: ',distType) .. pipeName)
            system.print(string.format('Closest Distance: %.2f SU',minDist*0.000005))
            system.print('---------------------')
        end
        if string.starts(text,'distance') then
            system.print('-- Distances to AR Points --')
            local distTable = {}
            local nameTable = {}
            local posTable = {}
            for name,pos in pairs(AR_Generate) do
                local pDist = vec3(pos - constructPosition):len()
                table.insert(distTable,pDist)
                nameTable[tostring(pDist)] = name
                posTable[tostring(pDist)] = string.format('::pos{0,0,%.1f,%.1f,%.1f}',pos['x'],pos['y'],pos['z'])
            end
            table.sort(distTable,function(a, b) return a > b end)
            for _,dist in ipairs(distTable) do
                system.print(string.format('%s -> %s',nameTable[tostring(dist)],formatNumber(dist,'distance')))
                system.print('   ' .. posTable[tostring(dist)])
            end
            system.print('----------------------------')
        end
        if string.starts(text:lower(),'setatmolimit ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 2 then
                if type(tonumber(matches[2])) == 'number' then
                    if matches[2] % 1 == 0 then
                        atmoManualLimit = tonumber(matches[2])
                        system.print("-- Atmo Speed limit set: " .. matches[2] .. " km/h --")
                    else
                        system.print("-- Atmo Speed limit must be a whole number --")
                    end
                else
                    system.print("-- Atmo Speed limit must be a number (".. type(tonumber(matches[2])) ..")--")
                end
            else
                system.print('-- Invalid input --')
            end
        end
        if string.starts(text:lower(),'dtr ') then
            matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches == 2 then
                if type(tonumber(matches[2])) == 'number' then
                    dampenerTorqueReduction = tonumber(matches[2])
                    system.print("-- Dampener Torque Reduction set: " .. matches[2]*100 .. " % --")
                end
            else
                system.print('-- Invalid input --')
            end
        end
        if string.starts(text, 'orbit ') then
            local words = {}
            for word in text:gmatch("%S+") do table.insert(words, word) end
            if #words ~= 2 then
                system.print('Usage: orbit <position string>')
                return
            end
        
            local pos_str = words[2]
            local system_id, planet_id, latitude, longitude, altitude = pos_str:match("::pos{(%d+),(%d+),([%d.-]+),([%d.-]+),([%d.-]+)}")
            if not (system_id and planet_id and latitude and longitude and altitude) then
                system.print("Invalid position format. Use ::pos{0,<planet>,<latitude>,<longitude>,<altitude>}")
                return
            end
            
            local target_pos = convertWaypoint("::pos{0," .. planet_id .. "," .. latitude .. "," .. longitude .. "," .. core.getAltitude() .. "}")  -- Reuses your existing convertWaypoint function
            if not target_pos then
                system.print('Invalid position format. Use ::pos{...}')
                return
            end
            
            local pos = vec3(construct.getWorldPosition())
            local dist = (pos - target_pos):len()
            if dist < 500 or dist > 10000 then
                system.print('Must be between 500m and 10km from orbit center')
                return
            end
            if unit.getAtmosphereDensity() == 0 then
                system.print('Orbit only available in atmosphere')
                return
            end
            if autopilot then
                system.print('Disable autopilot first')
                return
            end
            orbit_center = target_pos
            orbit_radius = dist
            orbit_agl = core.getAltitude()
            orbit_active = true
            autopilot = true  -- Engage autopilot in orbit mode
            system.print('Orbit engaged around ' .. pos_str .. ' (radius: ' .. math.floor(dist) .. 'm, AGL: ' .. math.floor(orbit_agl) .. 'm)')
        end
    onActionStart:
      args: ['antigravity']
      lua: |
          if antigrav ~= nil then antigrav.toggle() end
    onActionLoop:
      args: ['speeddown']
      lua: |
          if player.isFrozen() or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -0.5)
              else
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
              end
          end
    onActionStart:
      args: ['speeddown']
      lua: |
          if player.isFrozen() or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -1.0)
              else
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
              end
          end
    onActionLoop:
      args: ['speedup']
      lua: |
          if player.isFrozen() or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 0.5)
              else
                  Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
              end
          end
    onActionStart:
      args: ['speedup']
      lua: |
          if player.isFrozen() or seated then
              if lAlt then
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 1.0)
              else
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
              end
          end
    onActionStart:
      args: ['stopengines']
      lua: |
          if Nav.axisCommandManager:getThrottleCommand(0) == 0 then
              Nav.axisCommandManager:setThrottleCommand(0,1)
              enginesOn = true
          else
              Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
              enginesOn = false
          end
    onActionStart:
      args: ['lshift']
      lua: |
          lShift = true
          if not lAlt then showScreen = false end
    onActionStop:
      args: ['lshift']
      lua: |
          lShift = false
          showScreen = true
    onActionStart:
      args: ['lalt']
      lua: |
          lAlt = true
    onActionStop:
      args: ['lalt']
      lua: |
          lAlt = false
    onActionStart:
      args: ['booster']
      lua: |
          if lAlt then
              boosterOn = not boosterOn
              if boosterOn then 
                  system.print('-- Boosters Engaged --')
                  unit.setTimer('booster',.75)
              else
                  boosterCount = 0
                  unit.stopTimer('booster')
                  if Nav.boosterState then 
                      Nav:toggleBoosters()
                      system.print(' -- Boosters disengaged --')
                  end
              end
          else
              if player.isFrozen() or seated then
                  Nav:toggleBoosters()
              end
          end
    onActionStart:
      args: ['brake']
      lua: |
          
          if toggleBrakes then
              if brakeInput > 0 then
                  brakeInput = 0
                  brakesOn = false
              else
                  brakeInput = brakeInput + 1
                  brakesOn = true
              end
          else
              brakeInput = brakeInput + 1
              brakesOn = true
          end
          
          local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
          if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
              local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
              if (math.abs(targetSpeed) > constants.epsilon) then
                  Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
              end
          end

    onActionStop:
      args: ['brake']
      lua: |
          
          if not toggleBrakes and not spaceBar then
              brakeInput = 0
              brakesOn = false
          end
          

    onActionStart:
      args: ['yawleft']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput + 1
          end
    onActionStop:
      args: ['yawleft']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput - 1
          end
    onActionStart:
      args: ['yawright']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput - 1
          end
    onActionStop:
      args: ['yawright']
      lua: |
          if player.isFrozen() or seated then
              yawInput = yawInput + 1
          end
    onActionLoop:
      args: ['groundaltitudedown']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
          end
    onActionStart:
      args: ['groundaltitudedown']
      lua: |
          Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
    onActionLoop:
      args: ['groundaltitudeup']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
          end
    onActionStart:
      args: ['groundaltitudeup']
      lua: |
          Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
    onActionStop:
      args: ['down']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
          end
          

    onActionStart:
      args: ['down']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
          end
          

    onActionStop:
      args: ['up']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
          end
          spaceBar = false
    onActionStart:
      args: ['up']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
          end
          spaceBar = true
          if spaceBar and lAlt and hoverLocked then
              hoverLocked = false
              Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
              Nav.axisCommandManager:setTargetGroundAltitude(1)
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(1)
              system.print("Hover mode unlocked")
          elseif spaceBar and lAlt and not hoverLocked then
              system.print("Hover mode locked")
              hoverLocked = true
              Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(500)
              system.print("Hover mode locked")
              Nav.axisCommandManager:setTargetGroundAltitude(500)
              system.print("Hover mode locked")
          end
    onActionStop:
      args: ['strafeleft']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
          end
    onActionStart:
      args: ['strafeleft']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
          end
    onActionStop:
      args: ['straferight']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
          end
    onActionStart:
      args: ['straferight']
      lua: |
          if player.isFrozen() or seated then
              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
              
              dampening = not dampening
          
              if dampening then
                  system.print("-- DAMPENING ON  --")
                  system.playSound('damp_on.mp3')
              else
                  system.print("-- DAMPENING OFF --")
                  system.playSound('damp_off.mp3')
              end
          end
    onActionStop:
      args: ['right']
      lua: |
          if player.isFrozen() or seated then
              rollInput = rollInput - 1
          end
    onActionStart:
      args: ['right']
      lua: |
          rollInput = rollInput + 1
    onActionStop:
      args: ['left']
      lua: |
          if player.isFrozen() or seated then
              rollInput = rollInput + 1
          end
    onActionStart:
      args: ['left']
      lua: |
          if player.isFrozen() or seated then
              rollInput = rollInput - 1
          end
    onActionStop:
      args: ['backward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput - 1
          end
    onActionStart:
      args: ['backward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput + 1
          end
    onActionStop:
      args: ['forward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput + 1
          end
    onActionStart:
      args: ['forward']
      lua: |
          if player.isFrozen() or seated then
              pitchInput = pitchInput - 1
          end
    onActionStart:
      args: ['light']
      lua: |
          if Nav.control.isAnyHeadlightSwitchedOn() then
              Nav.control.switchOffHeadlights()
          else
              Nav.control.switchOnHeadlights()
          end
          

    onActionStart:
      args: ['gear']
      lua: |
          gearExtended = not gearExtended
          if gearExtended then
              Nav.control.deployLandingGears()
              Nav.axisCommandManager:setTargetGroundAltitude(0)
              player.freeze(false)
          else
              Nav.control.retractLandingGears()
              Nav.axisCommandManager:setTargetGroundAltitude(defaultHoverHeight)
              player.freeze(true)
          end
          


    onActionStart:
      args: ['option1']
      lua: |
          if not lShift then
              if showHelp then
                  if not showHelper then
                      system.showHelper(0)
                  end
                  showHelp = false
              else
                  system.showHelper(1) showHelp = true
              end
          end
    onActionStart:
      args: ['option2']
      lua: |
          if not lShift then
              if legacyFile then
                  if AR_Mode == 'ALL' then AR_Mode = 'PLANETS' system.print('-- AR Mode: Planets --')
                  elseif AR_Mode == 'PLANETS' and AR_Temp then AR_Mode = 'TEMPORARY' system.print('-- AR Mode: TEMPORARY --')
                  elseif AR_Mode == 'PLANETS' and AR_Custom then AR_Mode = 'FROM_FILE' system.print('-- AR Mode: FROM_FILE --')
                  elseif AR_Mode == 'PLANETS' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'TEMPORARY' and AR_Custom then AR_Mode = 'FROM_FILE' system.print('-- AR Mode: FROM_FILE --')
                  elseif AR_Mode == 'TEMPORARY' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FROM_FILE' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'NONE' then AR_Mode = 'ALL' system.print('-- AR Mode: ALL --')
                  end
              else
                  if AR_Mode == 'ALL' then AR_Mode = 'PLANETS' system.print('-- AR Mode: Planets --')
                  elseif AR_Mode == 'PLANETS' and AR_Temp then AR_Mode = 'TEMPORARY' system.print('-- AR Mode: TEMPORARY --')
                  elseif AR_Mode == 'PLANETS' and AR_Custom then AR_Mode = 'FILE1' system.print('-- AR Mode: FILE1: '..validWaypointFiles[1].DisplayName..' --')
                  elseif AR_Mode == 'PLANETS' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'TEMPORARY' and AR_Custom then AR_Mode = 'FILE1' system.print('-- AR Mode: FILE1: '..validWaypointFiles[1].DisplayName..' --')
                  elseif AR_Mode == 'TEMPORARY' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE1' and #validWaypointFiles > 1 then AR_Mode = 'FILE2' system.print('-- AR Mode: FILE2: '..validWaypointFiles[2].DisplayName..' --')
                  elseif AR_Mode == 'FILE1' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE2' and #validWaypointFiles > 2 then AR_Mode = 'FILE3' system.print('-- AR Mode: FILE3: '..validWaypointFiles[3].DisplayName..' --')
                  elseif AR_Mode == 'FILE2' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE3' and #validWaypointFiles > 3 then AR_Mode = 'FILE4' system.print('-- AR Mode: FILE4: '..validWaypointFiles[4].DisplayName..' --')
                  elseif AR_Mode == 'FILE3' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE4' and #validWaypointFiles > 4 then AR_Mode = 'FILE5' system.print('-- AR Mode: FILE5: '..validWaypointFiles[5].DisplayName..' --')
                  elseif AR_Mode == 'FILE4' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE5' and #validWaypointFiles > 5 then AR_Mode = 'FILE6' system.print('-- AR Mode: FILE6: '..validWaypointFiles[6].DisplayName..' --')
                  elseif AR_Mode == 'FILE5' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE6' and #validWaypointFiles > 6 then AR_Mode = 'FILE7' system.print('-- AR Mode: FILE7: '..validWaypointFiles[7].DisplayName..' --')
                  elseif AR_Mode == 'FILE6' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE7' and #validWaypointFiles > 7 then AR_Mode = 'FILE8' system.print('-- AR Mode: FILE8: '..validWaypointFiles[8].DisplayName..' --')
                  elseif AR_Mode == 'FILE7' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE8' and #validWaypointFiles > 8 then AR_Mode = 'FILE9' system.print('-- AR Mode: FILE9: '..validWaypointFiles[9].DisplayName..' --')
                  elseif AR_Mode == 'FILE8' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'FILE9' and #validWaypointFiles > 9 then AR_Mode = 'FILE10' system.print('-- AR Mode: FILE10: '..validWaypointFiles[10].DisplayName..' --')
                  elseif AR_Mode == 'FILE9' then AR_Mode = 'NONE' system.print('-- AR Mode: NONE --')
                  elseif AR_Mode == 'NONE' then AR_Mode = 'ALL' system.print('-- AR Mode: ALL --')
                  else AR_Mode = 'NONE' system.print('-- Invalid AR Mode, Try again --')
                  end
              end
          end
    onActionStart:
      args: ['option3']
      lua: |
          if orbit_active and orbit_center:len() > 0 then
              orbit_active = false
              autopilot = false  -- Exit autopilot mode
              system.print('Orbit disabled')
          elseif orbit_center:len() > 0 then  -- Only re-enable if params were set previously
              orbit_active = true
              autopilot = true
              system.print('Orbit re-enabled')
          else
              system.print('Set orbit params first with "orbit <pos> <speed>"')
          end
    onActionStart:
      args: ['option4']
      lua: |
          if lShift and homeBaseLocation then
              autopilot_dest = homeBaseVec
              autopilot_dest_pos = homeBaseLocation
              system.print('-- Autopilot set to home --')
          else
              autopilot = not autopilot
              if autopilot and autopilot_dest == nil then
                  autopilot = false
                  system.print('-- No autopilot destination entered --')
                  system.print('-- Autopilot disabled --')
                  db_1.setIntValue('record',0)
              elseif not autopilot then
                  system.print('-- Autopilot disabled --')
                  db_1.setIntValue('record',0)
              end
              if autopilot then
                  if route then
                      db_1.setIntValue('record',1)
                      system.print('-- Routepilot engaged --')
                  else
                      system.print('-- Autopilot engaged --')
                  end
                  system.setWaypoint(autopilot_dest_pos)
                  brakesOn = false
                  enginesOn = true
              end
          end
    onActionStart:
      args: ['option5']
      lua: |
          trackerMode = not trackerMode
          system.print(string.format('-- Tracker Mode "%s"',trackerMode))
    onActionStart:
      args: ['option6']
      lua: |
          if atmoSpeedLimit then
              atmoSpeedLimit = false
              system.print("Atmospheric speed limit disabled")
          else
              atmoSpeedLimit = true
              system.print("Atmospheric speed limit enabled")
          end
    onActionStart:
      args: ['option7']
      lua: |

    onActionStart:
      args: ['option8']
      lua: |
          if shield_1 and not shield_1.isVenting() then shield_1.startVenting()
          elseif shield_1 and shield_1.isVenting() then shield_1.stopVenting() shield_1.activate()
          end
    onActionStart:
      args: ['option9']
      lua: |
          local masterMode = Nav.axisCommandManager:getMasterMode()
          if (masterMode == controlMasterModeId.travel) then
              Nav.control.cancelCurrentControlMasterMode()
              Nav.axisCommandManager:setMasterMode(controlMasterModeId.cruise)
          else
              Nav.control.cancelCurrentControlMasterMode()
              Nav.axisCommandManager:setMasterMode(controlMasterModeId.travel)
          end
  shield_1:
    onAbsorbed(damage,rawDamage):
      lua: |
        -- Damage
        if not dmgTick then dmgTick = arkTime end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = damage
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + damage
        end
  core:
    onStressChanged(stress):
      lua: |
        if not dmgTick then dmgTick = arkTime end
        
        local dmgTime = tonumber(string.format('%.0f',arkTime))
        
        if not dpsChart[dmgTime] then
            dpsChart[dmgTime] = stress
        else
            dpsChart[dmgTime] = dpsChart[dmgTime] + stress
        end